// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240424161846_ThuHoa")]
    partial class ThuHoa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "76791528-9973-42be-a101-57c13dd80b6b",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(222),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(212),
                            DrinkTypeId = "6a343abb-7721-4ad3-84eb-efdf765a9ec1",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "633a5c94-03c6-4c5c-b262-cef77180092f",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(250),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(240),
                            DrinkTypeId = "6a343abb-7721-4ad3-84eb-efdf765a9ec1",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "e7ed390f-cb1d-4b55-9ba6-d59c2c21f96b",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(273),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(264),
                            DrinkTypeId = "bed0174b-bca6-4b4e-94cf-6f4901ac1a1e",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "3fb444ba-0a88-495c-b241-463eac957042",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(305),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(287),
                            DrinkTypeId = "bed0174b-bca6-4b4e-94cf-6f4901ac1a1e",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "30851e7b-c848-4b6e-b036-c5e0c1cec599",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(334),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(324),
                            DrinkTypeId = "ab6d32b6-3a34-4444-a889-0521530f17b8",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "9368cd9d-c739-457c-8fcc-143f32ba490b",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(361),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(351),
                            DrinkTypeId = "ab6d32b6-3a34-4444-a889-0521530f17b8",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "aa28f4db-6996-41ca-8e6f-b77ea7274af7",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(386),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(377),
                            DrinkTypeId = "196dbcd6-2fe3-4593-a4ce-5789bbc39e07",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "54aefb4d-c877-4b80-981a-23bb8bccf701",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(417),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(400),
                            DrinkTypeId = "196dbcd6-2fe3-4593-a4ce-5789bbc39e07",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "6a343abb-7721-4ad3-84eb-efdf765a9ec1",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Local).AddTicks(9866),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9855),
                            Name = "Coffee",
                            ShopId = "663d9462-e3b1-463d-818d-87a91560230d"
                        },
                        new
                        {
                            Id = "bed0174b-bca6-4b4e-94cf-6f4901ac1a1e",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Local).AddTicks(9890),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9881),
                            Name = "Tea",
                            ShopId = "663d9462-e3b1-463d-818d-87a91560230d"
                        },
                        new
                        {
                            Id = "ab6d32b6-3a34-4444-a889-0521530f17b8",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Local).AddTicks(9916),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9906),
                            Name = "Smoothie",
                            ShopId = "663d9462-e3b1-463d-818d-87a91560230d"
                        },
                        new
                        {
                            Id = "196dbcd6-2fe3-4593-a4ce-5789bbc39e07",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Local).AddTicks(9951),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9933),
                            Name = "Juice",
                            ShopId = "663d9462-e3b1-463d-818d-87a91560230d"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(518),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(526),
                            ExpiryDate = new DateTime(2024, 5, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(531),
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(547),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(553),
                            ExpiryDate = new DateTime(2024, 6, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(556),
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "b7d8060c-b6a1-4c39-8925-c323bfb1f269",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(618),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(624),
                            DrinkId = "76791528-9973-42be-a101-57c13dd80b6b",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "c68e080c-6b9d-4687-b6fc-f24b1a48da98",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(645),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(650),
                            DrinkId = "76791528-9973-42be-a101-57c13dd80b6b",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "932b3846-a761-40e5-84ee-eb7c2966cca9",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(676),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(681),
                            DrinkId = "633a5c94-03c6-4c5c-b262-cef77180092f",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "41da0bc9-be9f-41b9-9bed-7d293dbfeb3a",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(700),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(705),
                            DrinkId = "633a5c94-03c6-4c5c-b262-cef77180092f",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "b00071e5-d8cd-4a1d-86de-dc27f12060c2",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(726),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(730),
                            DrinkId = "e7ed390f-cb1d-4b55-9ba6-d59c2c21f96b",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "b40f9272-b771-47af-89d6-dcca9c23f919",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(746),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(749),
                            DrinkId = "e7ed390f-cb1d-4b55-9ba6-d59c2c21f96b",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "d6c31a2b-6078-4780-b27c-64b2fb8c2ea7",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(850),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(855),
                            DrinkId = "3fb444ba-0a88-495c-b241-463eac957042",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "2a3e84d2-47fe-4fa0-8c46-f985e3931a7e",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(871),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(874),
                            DrinkId = "3fb444ba-0a88-495c-b241-463eac957042",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "916e9fba-4fd3-46ef-b4c7-90e6e6033910",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(887),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(892),
                            DrinkId = "30851e7b-c848-4b6e-b036-c5e0c1cec599",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "f0669a9f-5887-4675-9d83-0473aaefb272",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(905),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(908),
                            DrinkId = "30851e7b-c848-4b6e-b036-c5e0c1cec599",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "981a1e74-c86b-4508-9273-d888aad769cc",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(926),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(929),
                            DrinkId = "9368cd9d-c739-457c-8fcc-143f32ba490b",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "81e7dc31-34c2-4ed4-82a1-acfc26c9f861",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(943),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(947),
                            DrinkId = "9368cd9d-c739-457c-8fcc-143f32ba490b",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "972a7507-ff08-4d13-a196-5bd32094138e",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(959),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(962),
                            DrinkId = "aa28f4db-6996-41ca-8e6f-b77ea7274af7",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "0b5deaa0-3814-4ba1-a6ee-049c87f3c256",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(974),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(978),
                            DrinkId = "aa28f4db-6996-41ca-8e6f-b77ea7274af7",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "a5eba369-6d72-4e1a-9ab0-367ccc242b29",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(996),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(1000),
                            DrinkId = "54aefb4d-c877-4b80-981a-23bb8bccf701",
                            IngredientId = "fcea6bfc-f3d0-4b49-a956-36d8988d2b74",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "5635c464-ecd6-48b7-a4ce-5d6768603a3f",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(1014),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(1017),
                            DrinkId = "54aefb4d-c877-4b80-981a-23bb8bccf701",
                            IngredientId = "0a2c384e-fcf9-40ad-8fd7-c95d71c8cf90",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "7965599e-3a6b-44f5-a8a7-7c1d9c2e95a1",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Local).AddTicks(1121),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(1110),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "3623ea48-4ffb-4f99-ae6e-8d79445a4679"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "b29ff5fb-c554-4a81-82cf-32c8e924cb94",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(1164),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 576, DateTimeKind.Unspecified).AddTicks(1168),
                            DrinkId = "76791528-9973-42be-a101-57c13dd80b6b",
                            OrderId = "7965599e-3a6b-44f5-a8a7-7c1d9c2e95a1",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "663d9462-e3b1-463d-818d-87a91560230d",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9761),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9789),
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "3623ea48-4ffb-4f99-ae6e-8d79445a4679",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "3d9b25b4-af22-4fa8-a207-ee282f712310",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9814),
                            DateModified = new DateTime(2024, 4, 24, 23, 18, 43, 575, DateTimeKind.Unspecified).AddTicks(9819),
                            IsSuspended = false,
                            Name = "Tea Shop",
                            OwnerId = "3623ea48-4ffb-4f99-ae6e-8d79445a4679",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "31033632-6ef6-4650-9023-f9c672f34894",
                            ConcurrencyStamp = "334362fa-6527-4c27-bef3-600a8e3d1586",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3623ea48-4ffb-4f99-ae6e-8d79445a4679",
                            RoleId = "31033632-6ef6-4650-9023-f9c672f34894"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "3623ea48-4ffb-4f99-ae6e-8d79445a4679",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2aeaaf70-e848-4239-9089-b892936ef490",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC/j9rMgUXlTQnfwHvofFUsEhvdHkf/8bBriJhD/xCT4t4Mrpz17utQiHNxj2N3DsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9803f73-6ef6-46e0-82cb-051b96bea191",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
