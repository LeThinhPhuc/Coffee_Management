// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240506143648_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "984b8815-ad88-43e0-904b-29f15bdeb774",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6040),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6037),
                            DrinkTypeId = "38fdb72a-43ea-464d-905d-6a598061f603",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "4c894d42-783f-4c44-8b1a-d3be1a6a40a6",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6047),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6045),
                            DrinkTypeId = "38fdb72a-43ea-464d-905d-6a598061f603",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "779c8445-1a16-43e2-9a77-f84755b65a02",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6056),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6054),
                            DrinkTypeId = "593294d0-6021-463e-9668-69898ed385da",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "8c5ecde6-1877-47cb-a61f-fe868214606f",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6063),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6061),
                            DrinkTypeId = "593294d0-6021-463e-9668-69898ed385da",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "0281cbc4-941f-448e-b660-a741414ff429",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6070),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6067),
                            DrinkTypeId = "58855cff-6922-4886-a320-9828f6b66208",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "7f53f77c-c97f-4a9c-a095-807f8e2aac14",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6076),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6074),
                            DrinkTypeId = "58855cff-6922-4886-a320-9828f6b66208",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "e591acbf-b311-4a1d-bb17-f577c64a3b89",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6085),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6082),
                            DrinkTypeId = "70138d14-6270-43b9-98c7-43e3c61f077b",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "dee11acc-ee30-46e3-93b2-06ec594d6b14",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6091),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6089),
                            DrinkTypeId = "70138d14-6270-43b9-98c7-43e3c61f077b",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "38fdb72a-43ea-464d-905d-6a598061f603",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(5996),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(5993),
                            Name = "Coffee",
                            ShopId = "e2cd7e75-e7cb-40f2-b903-1185dcfe22f7"
                        },
                        new
                        {
                            Id = "593294d0-6021-463e-9668-69898ed385da",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6003),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6001),
                            Name = "Tea",
                            ShopId = "e2cd7e75-e7cb-40f2-b903-1185dcfe22f7"
                        },
                        new
                        {
                            Id = "58855cff-6922-4886-a320-9828f6b66208",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6013),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6010),
                            Name = "Smoothie",
                            ShopId = "e2cd7e75-e7cb-40f2-b903-1185dcfe22f7"
                        },
                        new
                        {
                            Id = "70138d14-6270-43b9-98c7-43e3c61f077b",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6020),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6018),
                            Name = "Juice",
                            ShopId = "e2cd7e75-e7cb-40f2-b903-1185dcfe22f7"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6141),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6143),
                            ExpiryDate = new DateTime(2024, 6, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6145),
                            Image = "",
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6153),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6154),
                            ExpiryDate = new DateTime(2024, 7, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6156),
                            Image = "",
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "796b4835-5c8c-437d-8750-2f8b1a01c392",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6178),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6180),
                            DrinkId = "984b8815-ad88-43e0-904b-29f15bdeb774",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "4ac67381-2466-43bb-8bdd-948291ab3f20",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6186),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6187),
                            DrinkId = "984b8815-ad88-43e0-904b-29f15bdeb774",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "164f761b-46d2-4632-a594-65472b1469a2",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6192),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6193),
                            DrinkId = "4c894d42-783f-4c44-8b1a-d3be1a6a40a6",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "695fe120-5c5c-469e-b733-1ccbd53dda46",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6198),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6200),
                            DrinkId = "4c894d42-783f-4c44-8b1a-d3be1a6a40a6",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "7244acc3-b577-4705-a7e7-801176672f25",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6207),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6208),
                            DrinkId = "779c8445-1a16-43e2-9a77-f84755b65a02",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "7e288963-cfe6-4b61-8e84-5b132d00f581",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6213),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6214),
                            DrinkId = "779c8445-1a16-43e2-9a77-f84755b65a02",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "b58ceb8f-5c57-4c7b-ae3d-06432bf47a69",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6219),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6220),
                            DrinkId = "8c5ecde6-1877-47cb-a61f-fe868214606f",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "014a627f-a610-4cc3-82da-a9ced1eb680b",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6225),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6227),
                            DrinkId = "8c5ecde6-1877-47cb-a61f-fe868214606f",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "8658d800-7400-4830-a7f4-a77e62c10f1a",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6233),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6235),
                            DrinkId = "0281cbc4-941f-448e-b660-a741414ff429",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "e3a63441-d7c2-4ca7-867e-1fa3013dbf5f",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6239),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6241),
                            DrinkId = "0281cbc4-941f-448e-b660-a741414ff429",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "ac6826f2-6bf0-42d3-b14b-4c73ff7c5f8b",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6246),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6247),
                            DrinkId = "7f53f77c-c97f-4a9c-a095-807f8e2aac14",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "0551d1c0-f9d9-4c49-9633-c453ad56c93e",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6252),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6254),
                            DrinkId = "7f53f77c-c97f-4a9c-a095-807f8e2aac14",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "bb0869c4-6d2c-4565-a215-146d31ac9ddc",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6261),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6262),
                            DrinkId = "e591acbf-b311-4a1d-bb17-f577c64a3b89",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "8cb3daa9-fce3-4ad2-a0a2-2491a4a6dc4b",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6267),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6269),
                            DrinkId = "e591acbf-b311-4a1d-bb17-f577c64a3b89",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "75f5d154-d7ce-4835-b514-0cacab2f7d31",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6274),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6275),
                            DrinkId = "dee11acc-ee30-46e3-93b2-06ec594d6b14",
                            IngredientId = "c46c32b0-63ce-42ea-b737-d629fc566b63",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "345148bf-3996-4cc8-b248-9ad7b792cbca",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6303),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6304),
                            DrinkId = "dee11acc-ee30-46e3-93b2-06ec594d6b14",
                            IngredientId = "7a414db0-93e9-4e40-a51c-cd9493dc4830",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "551ed154-424a-4cf1-8f2c-006814dcc381",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Local).AddTicks(6344),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6340),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "55ee42d7-b7c7-41ff-8bf7-7448a40466f2"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "f6d9825f-bee4-4f52-98c2-cf332531d777",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6360),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(6362),
                            DrinkId = "984b8815-ad88-43e0-904b-29f15bdeb774",
                            OrderId = "551ed154-424a-4cf1-8f2c-006814dcc381",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "e2cd7e75-e7cb-40f2-b903-1185dcfe22f7",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(5956),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(5976),
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "55ee42d7-b7c7-41ff-8bf7-7448a40466f2",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "63393bdf-0c07-4f5c-a60a-65e4a11c4c66",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(5981),
                            DateModified = new DateTime(2024, 5, 6, 21, 36, 48, 589, DateTimeKind.Unspecified).AddTicks(5983),
                            IsSuspended = false,
                            Name = "Tea Shop",
                            OwnerId = "55ee42d7-b7c7-41ff-8bf7-7448a40466f2",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "b23fa1f9-d1fa-4474-ac59-5eef9b3f7152",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "55ee42d7-b7c7-41ff-8bf7-7448a40466f2",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "55ee42d7-b7c7-41ff-8bf7-7448a40466f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95c76216-c982-443f-ae3a-8e8798d86d92",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELmq8439pIZ7eOA3dKHqOrBXqoBmMt5JcrZq+imMhuMUjELKx8iLoH+CvyNFwCBF9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ebbb68e-a0e9-4bd6-8126-492eb6d98f95",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
