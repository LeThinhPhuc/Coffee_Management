// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240407142831_UpdateUserNormalizedName")]
    partial class UpdateUserNormalizedName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "7f44039c-9b26-4645-9f50-47035c0453b0",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(3490),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3480),
                            DrinkTypeId = "d92ae67c-94d4-4fb4-b430-20e891754707",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "7471af51-6ad0-4597-abb9-acf774aef794",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(3600),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3580),
                            DrinkTypeId = "d92ae67c-94d4-4fb4-b430-20e891754707",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "d68052ce-00bb-42b4-aaef-1da972126682",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(3720),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3690),
                            DrinkTypeId = "aaa27103-b226-4562-b7d1-4e30a231ce91",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "8e4653b4-f6e2-4ed4-81c3-b24c96766218",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(3910),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3890),
                            DrinkTypeId = "aaa27103-b226-4562-b7d1-4e30a231ce91",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "dd557a07-9f9f-4b68-9fe8-926eb3acf5e9",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(4010),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3990),
                            DrinkTypeId = "cc91be65-a41c-4717-b574-bc57e02759f5",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "3764424e-06dc-45cd-bfa9-3c0f1d371d0e",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(4110),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4100),
                            DrinkTypeId = "cc91be65-a41c-4717-b574-bc57e02759f5",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "6f2274b6-6b2c-4919-9ebb-b382d11fde52",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(4220),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4200),
                            DrinkTypeId = "6a74379c-57ae-46aa-a271-e0f32041ac76",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "d549f3fb-9dd9-4d8e-a313-88cd5421ae6e",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(4320),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4300),
                            DrinkTypeId = "6a74379c-57ae-46aa-a271-e0f32041ac76",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "d92ae67c-94d4-4fb4-b430-20e891754707",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(2840),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(2820),
                            Name = "Coffee",
                            ShopId = "f7cdbe36-a2f9-43a6-b94d-0e438b1ae861"
                        },
                        new
                        {
                            Id = "aaa27103-b226-4562-b7d1-4e30a231ce91",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(3130),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3110),
                            Name = "Tea",
                            ShopId = "f7cdbe36-a2f9-43a6-b94d-0e438b1ae861"
                        },
                        new
                        {
                            Id = "cc91be65-a41c-4717-b574-bc57e02759f5",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(3230),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3210),
                            Name = "Smoothie",
                            ShopId = "f7cdbe36-a2f9-43a6-b94d-0e438b1ae861"
                        },
                        new
                        {
                            Id = "6a74379c-57ae-46aa-a271-e0f32041ac76",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(3330),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(3320),
                            Name = "Juice",
                            ShopId = "f7cdbe36-a2f9-43a6-b94d-0e438b1ae861"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4440),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4560),
                            ExpiryDate = new DateTime(2024, 5, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(4570),
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4620),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4670),
                            ExpiryDate = new DateTime(2024, 6, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(4680),
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "c7b31773-65fa-452e-8bd2-2f7b495f9061",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4770),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4810),
                            DrinkId = "7f44039c-9b26-4645-9f50-47035c0453b0",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "86b3fbef-dacb-4561-9524-db4c0b43de93",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4880),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4920),
                            DrinkId = "7f44039c-9b26-4645-9f50-47035c0453b0",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "f23f2040-6470-47d0-8260-57403f0bf4dd",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(4980),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5030),
                            DrinkId = "7471af51-6ad0-4597-abb9-acf774aef794",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "2d4ebac3-5ca0-4f09-bbf6-73921f6cf66c",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5080),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5120),
                            DrinkId = "7471af51-6ad0-4597-abb9-acf774aef794",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "8275c9b7-3463-4e66-8675-48c1d38ec43d",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5330),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5380),
                            DrinkId = "d68052ce-00bb-42b4-aaef-1da972126682",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "3a730ccd-c010-4982-9045-ecc774557ef1",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5440),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5480),
                            DrinkId = "d68052ce-00bb-42b4-aaef-1da972126682",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "1af9c4d2-8d07-4b7e-ab7e-a96aeb31e5c4",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5540),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5580),
                            DrinkId = "8e4653b4-f6e2-4ed4-81c3-b24c96766218",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "d0b8fa9f-84aa-4130-a123-af289407f140",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5640),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5680),
                            DrinkId = "8e4653b4-f6e2-4ed4-81c3-b24c96766218",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "bb166fd3-dc91-4628-9f2f-c8f145467b70",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5740),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5780),
                            DrinkId = "dd557a07-9f9f-4b68-9fe8-926eb3acf5e9",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "7cec59d8-9f34-4758-ba44-609dc527f8ec",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5850),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(5890),
                            DrinkId = "dd557a07-9f9f-4b68-9fe8-926eb3acf5e9",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "569fe598-9085-4e5b-8068-f2e55d27b26a",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6020),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6070),
                            DrinkId = "3764424e-06dc-45cd-bfa9-3c0f1d371d0e",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "34a37889-0b43-4081-8027-553f3e43e8d0",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6120),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6170),
                            DrinkId = "3764424e-06dc-45cd-bfa9-3c0f1d371d0e",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "3b0cbdb8-e4f8-4014-83a6-f1b037629550",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6220),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6260),
                            DrinkId = "6f2274b6-6b2c-4919-9ebb-b382d11fde52",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "5d47669d-da69-4bb5-925b-8dac5d33d8bc",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6320),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6360),
                            DrinkId = "6f2274b6-6b2c-4919-9ebb-b382d11fde52",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "4be45eff-bbe8-4728-b965-346f71b4e230",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6420),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6460),
                            DrinkId = "d549f3fb-9dd9-4d8e-a313-88cd5421ae6e",
                            IngredientId = "33d4fe6f-3deb-4032-95d5-240cdb1629a7",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "2bcb3846-0006-4a3c-ad36-d85341537e53",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6520),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6560),
                            DrinkId = "d549f3fb-9dd9-4d8e-a313-88cd5421ae6e",
                            IngredientId = "9f29468c-7b23-4131-9c7b-ffd2e1aa2ff2",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "a867a594-da11-48c5-9590-7a33f801026b",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Local).AddTicks(6940),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(6920),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "46cccf6c-7fd7-4dee-8272-2e2d284b5ddf"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "9ac20f7c-e47e-45bc-8032-fa80cd987789",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(7060),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(7110),
                            DrinkId = "7f44039c-9b26-4645-9f50-47035c0453b0",
                            OrderId = "a867a594-da11-48c5-9590-7a33f801026b",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "f7cdbe36-a2f9-43a6-b94d-0e438b1ae861",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(2490),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(2590),
                            Name = "Coffee House",
                            OwnerId = "46cccf6c-7fd7-4dee-8272-2e2d284b5ddf",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "9e7d2f99-cd63-4808-a7d4-5a8183778699",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(2660),
                            DateModified = new DateTime(2024, 4, 7, 21, 28, 29, 339, DateTimeKind.Unspecified).AddTicks(2700),
                            Name = "Tea Shop",
                            OwnerId = "46cccf6c-7fd7-4dee-8272-2e2d284b5ddf",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "46cccf6c-7fd7-4dee-8272-2e2d284b5ddf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93b5bca2-f30b-4fe7-a4c7-e5cfa1a2cc0d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEELYojE1PFp50tVceJk36b/Y7us8DA6PzIcyrv3DrUggJ5pw4IETY722inC3z7ex/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c477219d-9ad2-47e4-bc91-5d057fd260c3",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
