// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "0b6bb3b0-3c9c-44c0-9cc4-bd44704bc584",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9520),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9510),
                            DrinkTypeId = "d9282fb4-28fe-4293-912c-e9c0ea1b2b6e",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "a0b745a3-8083-45dc-a282-3adc44c6b0b6",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9590),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9580),
                            DrinkTypeId = "d9282fb4-28fe-4293-912c-e9c0ea1b2b6e",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "626f2f0b-d59a-4fb4-9728-9c042546bd95",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9660),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9650),
                            DrinkTypeId = "739ae770-18ff-41ba-ab29-3d783c39ce93",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "6dbfbd04-7884-4058-9355-ba5e2459d775",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9720),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9710),
                            DrinkTypeId = "739ae770-18ff-41ba-ab29-3d783c39ce93",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "db042b60-f9bc-4d6c-be56-8278d1b6ceb7",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9790),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9780),
                            DrinkTypeId = "13688753-1d47-48db-84f3-81c0ce14f45b",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "c35f4771-3b70-4787-b402-db8fae084e9e",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9860),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9850),
                            DrinkTypeId = "13688753-1d47-48db-84f3-81c0ce14f45b",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "ef98d508-63b0-4e55-8076-0d83bf08a3b5",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9990),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9980),
                            DrinkTypeId = "45f999f7-b7a5-47c6-bb77-6ac180396d35",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "79dbbb0d-8232-48e0-b54a-556f51a30bf5",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Local).AddTicks(50),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(40),
                            DrinkTypeId = "45f999f7-b7a5-47c6-bb77-6ac180396d35",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "d9282fb4-28fe-4293-912c-e9c0ea1b2b6e",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9150),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9130),
                            Name = "Coffee",
                            ShopId = "686c5eb9-2885-4a49-8c06-aa9b61475e36"
                        },
                        new
                        {
                            Id = "739ae770-18ff-41ba-ab29-3d783c39ce93",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9210),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9200),
                            Name = "Tea",
                            ShopId = "686c5eb9-2885-4a49-8c06-aa9b61475e36"
                        },
                        new
                        {
                            Id = "13688753-1d47-48db-84f3-81c0ce14f45b",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9280),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9270),
                            Name = "Smoothie",
                            ShopId = "686c5eb9-2885-4a49-8c06-aa9b61475e36"
                        },
                        new
                        {
                            Id = "45f999f7-b7a5-47c6-bb77-6ac180396d35",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Local).AddTicks(9340),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9330),
                            Name = "Juice",
                            ShopId = "686c5eb9-2885-4a49-8c06-aa9b61475e36"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(140),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(170),
                            ExpiryDate = new DateTime(2024, 6, 25, 1, 10, 29, 721, DateTimeKind.Local).AddTicks(170),
                            Image = "",
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(210),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(230),
                            ExpiryDate = new DateTime(2024, 7, 25, 1, 10, 29, 721, DateTimeKind.Local).AddTicks(240),
                            Image = "",
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "b2485217-0217-4deb-b861-dd63423892ed",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(310),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(330),
                            DrinkId = "0b6bb3b0-3c9c-44c0-9cc4-bd44704bc584",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "4579fa93-44e4-4a3f-bcfd-9c8da816e8e3",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(370),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(450),
                            DrinkId = "0b6bb3b0-3c9c-44c0-9cc4-bd44704bc584",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "b8962be1-2dd9-479f-ad8d-5cea693958aa",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(500),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(530),
                            DrinkId = "a0b745a3-8083-45dc-a282-3adc44c6b0b6",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "636e97be-6d14-49cd-91d3-1750debaad38",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(560),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(590),
                            DrinkId = "a0b745a3-8083-45dc-a282-3adc44c6b0b6",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "cdfb7551-231d-45b1-8bd9-ac51e95da6aa",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(630),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(650),
                            DrinkId = "626f2f0b-d59a-4fb4-9728-9c042546bd95",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "f86610ba-4107-4424-92d1-61e1fb0bf4f2",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(690),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(720),
                            DrinkId = "626f2f0b-d59a-4fb4-9728-9c042546bd95",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "9e748e09-991a-46b2-8394-78a108834c0a",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(750),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(780),
                            DrinkId = "6dbfbd04-7884-4058-9355-ba5e2459d775",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "de9a1e6d-a9aa-4df3-a06c-09bb11658229",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(810),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(900),
                            DrinkId = "6dbfbd04-7884-4058-9355-ba5e2459d775",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "f58c1dfd-ac5e-456c-895d-fb28ddd0cabe",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(940),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(970),
                            DrinkId = "db042b60-f9bc-4d6c-be56-8278d1b6ceb7",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "8b35c845-5471-4921-ab52-8dd67dc672a2",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1000),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1030),
                            DrinkId = "db042b60-f9bc-4d6c-be56-8278d1b6ceb7",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "d2e2f864-ff0b-4f9c-9f0c-1121d2ec55cf",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1070),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1090),
                            DrinkId = "c35f4771-3b70-4787-b402-db8fae084e9e",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "827ffca6-498f-4119-8af0-e19295ac2786",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1130),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1160),
                            DrinkId = "c35f4771-3b70-4787-b402-db8fae084e9e",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "3cc3fa3a-a118-410c-a575-e0b8399fff56",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1190),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1220),
                            DrinkId = "ef98d508-63b0-4e55-8076-0d83bf08a3b5",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "ecf3285c-b387-4a96-82bb-376c3ea00092",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1250),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1330),
                            DrinkId = "ef98d508-63b0-4e55-8076-0d83bf08a3b5",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "5cc7afab-d5d4-478f-8d51-7f6e39b579e9",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1370),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1400),
                            DrinkId = "79dbbb0d-8232-48e0-b54a-556f51a30bf5",
                            IngredientId = "67cbf525-7161-49d4-aa47-da76b0828e68",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "c8b76960-921d-4bab-8674-60a5190c25ce",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1430),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1460),
                            DrinkId = "79dbbb0d-8232-48e0-b54a-556f51a30bf5",
                            IngredientId = "d6f4416f-7a4f-458a-a745-1a536cd22173",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "af3301ef-025d-415d-8839-d473dbe3069e",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Local).AddTicks(1610),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1600),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "1f78d9e9-a0aa-4501-a090-7cf6d2884cef"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "3dd7710c-3776-410a-83ff-df3a784dbd52",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1670),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 721, DateTimeKind.Unspecified).AddTicks(1700),
                            DrinkId = "0b6bb3b0-3c9c-44c0-9cc4-bd44704bc584",
                            OrderId = "af3301ef-025d-415d-8839-d473dbe3069e",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "686c5eb9-2885-4a49-8c06-aa9b61475e36",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(8960),
                            DateModified = new DateTime(2024, 5, 25, 1, 10, 29, 720, DateTimeKind.Unspecified).AddTicks(9020),
                            IsApproved = true,
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "1f78d9e9-a0aa-4501-a090-7cf6d2884cef",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "80a16bcc-60e1-4b84-9c59-235150b4030f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1f78d9e9-a0aa-4501-a090-7cf6d2884cef",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "1f78d9e9-a0aa-4501-a090-7cf6d2884cef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42571450-57d3-4097-9100-67ccf6c821d6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAwj3NF8eKFTr7u/548h1QmgN9XsL4L/qPRb5hSKgQiQ59IQtKLaj23ecojsUt3yzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "049e0fd8-5ec6-4f4e-bd60-5c977dd57d3d",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
