// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240405141512_EditOrderModel")]
    partial class EditOrderModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "ba11474b-7948-49c9-b1ee-1ee3865dd013",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(9310),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(9290),
                            DrinkTypeId = "bce5f450-0b36-4130-a8cb-a87a308da83d",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "6ae866bc-fee7-4f36-9e27-e94f708a5ffe",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(9450),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(9430),
                            DrinkTypeId = "bce5f450-0b36-4130-a8cb-a87a308da83d",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "5b045f68-17ca-42f7-8d83-99fa58aac7d2",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(9580),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(9540),
                            DrinkTypeId = "f95ca8a8-936e-4e8b-9804-4fd77409120c",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "ed958a4b-9677-4b14-8cc8-7a3574824e07",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(9690),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(9680),
                            DrinkTypeId = "f95ca8a8-936e-4e8b-9804-4fd77409120c",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "7ef11968-0a2d-4810-b8d4-4328272ed6ba",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(9930),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(9910),
                            DrinkTypeId = "35e315eb-570d-43f8-a074-08cd8d0a65c1",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "8380d357-19b1-415c-ab7d-ba9970b42c55",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Local).AddTicks(50),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(40),
                            DrinkTypeId = "35e315eb-570d-43f8-a074-08cd8d0a65c1",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "dcd82f43-75e7-464f-8443-097940555441",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Local).AddTicks(160),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(140),
                            DrinkTypeId = "1341d162-42b3-43c0-84af-f349bdb94ccb",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "6663b8ca-f03a-4100-9726-3fc701d5d065",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Local).AddTicks(300),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(280),
                            DrinkTypeId = "1341d162-42b3-43c0-84af-f349bdb94ccb",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "bce5f450-0b36-4130-a8cb-a87a308da83d",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(8530),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(8510),
                            Name = "Coffee",
                            ShopId = "25466e12-2545-43b8-98da-13659f3b0fe7"
                        },
                        new
                        {
                            Id = "f95ca8a8-936e-4e8b-9804-4fd77409120c",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(8670),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(8650),
                            Name = "Tea",
                            ShopId = "25466e12-2545-43b8-98da-13659f3b0fe7"
                        },
                        new
                        {
                            Id = "35e315eb-570d-43f8-a074-08cd8d0a65c1",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(8970),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(8940),
                            Name = "Smoothie",
                            ShopId = "25466e12-2545-43b8-98da-13659f3b0fe7"
                        },
                        new
                        {
                            Id = "1341d162-42b3-43c0-84af-f349bdb94ccb",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Local).AddTicks(9080),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(9070),
                            Name = "Juice",
                            ShopId = "25466e12-2545-43b8-98da-13659f3b0fe7"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(500),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(640),
                            ExpiryDate = new DateTime(2024, 5, 5, 21, 15, 6, 891, DateTimeKind.Local).AddTicks(660),
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(730),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(890),
                            ExpiryDate = new DateTime(2024, 6, 5, 21, 15, 6, 891, DateTimeKind.Local).AddTicks(900),
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "3a4e322c-7403-4f89-9d4f-368ee989f36e",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1070),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1120),
                            DrinkId = "ba11474b-7948-49c9-b1ee-1ee3865dd013",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "09feb1d1-ab73-4291-8a90-5f23a1e7fa3c",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1200),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1250),
                            DrinkId = "ba11474b-7948-49c9-b1ee-1ee3865dd013",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "e3e1b2bb-edc8-46ed-9262-3c21e4bf283e",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1320),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1370),
                            DrinkId = "6ae866bc-fee7-4f36-9e27-e94f708a5ffe",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "9a7a5030-1175-4ec2-928a-0eb199e5ffc4",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1450),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1500),
                            DrinkId = "6ae866bc-fee7-4f36-9e27-e94f708a5ffe",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "9f2cb589-8b89-43a0-95ed-89405b9786a5",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1580),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1630),
                            DrinkId = "5b045f68-17ca-42f7-8d83-99fa58aac7d2",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "59b66662-8445-4f3b-922a-cd5e177c5c3c",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1830),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1900),
                            DrinkId = "5b045f68-17ca-42f7-8d83-99fa58aac7d2",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "322491a6-6f08-4630-afee-9b25af47ae8d",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(1980),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2030),
                            DrinkId = "ed958a4b-9677-4b14-8cc8-7a3574824e07",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "f7b4e3d8-2168-4afc-a983-67e27544f654",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2100),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2160),
                            DrinkId = "ed958a4b-9677-4b14-8cc8-7a3574824e07",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "766fb8ab-b818-4f87-a2c4-f9f94d320e4c",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2230),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2280),
                            DrinkId = "7ef11968-0a2d-4810-b8d4-4328272ed6ba",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "de23bbcf-a25b-4bf2-892e-9d91399819af",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2360),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2410),
                            DrinkId = "7ef11968-0a2d-4810-b8d4-4328272ed6ba",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "3103dd7e-e46a-4580-9044-5cbaa5e2ce0a",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2470),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2520),
                            DrinkId = "8380d357-19b1-415c-ab7d-ba9970b42c55",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "9c827b33-4b3f-4a18-b45d-9037269291b4",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2670),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2730),
                            DrinkId = "8380d357-19b1-415c-ab7d-ba9970b42c55",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "1a3140a8-a984-4893-9875-351abd63cdee",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2800),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2850),
                            DrinkId = "dcd82f43-75e7-464f-8443-097940555441",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "083795e4-254f-4a9c-b65a-22a712a4ec19",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2920),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(2970),
                            DrinkId = "dcd82f43-75e7-464f-8443-097940555441",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "a88848cd-ab2d-4b8a-93b2-dcf9a4665b52",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(3040),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(3090),
                            DrinkId = "6663b8ca-f03a-4100-9726-3fc701d5d065",
                            IngredientId = "d67f9ef5-34fa-4e87-b864-06653eb8039a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "ea4ed92e-f61b-42b9-907d-08292a648601",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(3150),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(3200),
                            DrinkId = "6663b8ca-f03a-4100-9726-3fc701d5d065",
                            IngredientId = "9ec835d7-8dc5-4e81-a6dc-a38e57b96129",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "43c1b9b0-c089-4bfe-aeb9-fa0edcfcf174",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Local).AddTicks(3640),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(3610),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "c0e66293-56a7-4d21-95c1-07f2e7f741a6"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "1f8ee569-977c-40b6-aba9-db454bf32eed",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(3780),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 891, DateTimeKind.Unspecified).AddTicks(3830),
                            DrinkId = "ba11474b-7948-49c9-b1ee-1ee3865dd013",
                            OrderId = "43c1b9b0-c089-4bfe-aeb9-fa0edcfcf174",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "25466e12-2545-43b8-98da-13659f3b0fe7",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(8080),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(8200),
                            Name = "Coffee House",
                            OwnerId = "c0e66293-56a7-4d21-95c1-07f2e7f741a6",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "4f5b368a-7d53-42a4-a1d8-1b0a4486ad17",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(8270),
                            DateModified = new DateTime(2024, 4, 5, 21, 15, 6, 890, DateTimeKind.Unspecified).AddTicks(8350),
                            Name = "Tea Shop",
                            OwnerId = "c0e66293-56a7-4d21-95c1-07f2e7f741a6",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "c0e66293-56a7-4d21-95c1-07f2e7f741a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f4f0a06-822f-4907-bff8-de82bfda67e2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFuUa6ZpYUIf8hyAymBWzjqkSXhbHRK4NPtsiUF8OcfpABcUxtMB6jnaiUZkklk4pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "972fe791-43dd-4bd4-9ebf-d8c88c25ae38",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
