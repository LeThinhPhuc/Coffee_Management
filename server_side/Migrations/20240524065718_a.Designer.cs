// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240524065718_a")]
    partial class a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "6642448b-5b38-4118-876d-abf11ffaad4f",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(443),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(439),
                            DrinkTypeId = "b5666e76-3aeb-4233-8bd0-57d8c94a1f98",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "b1f51f4f-e9d5-4229-a424-a9e6f4a1dbbc",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(481),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(447),
                            DrinkTypeId = "b5666e76-3aeb-4233-8bd0-57d8c94a1f98",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "6bcf7a66-7c11-4d74-878a-4822ee48653c",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(489),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(486),
                            DrinkTypeId = "943e89dd-4536-4eb1-bfd6-64c2673c3b44",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "78d3d15c-bcfe-4dc6-ad01-fee604f707f1",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(498),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(495),
                            DrinkTypeId = "943e89dd-4536-4eb1-bfd6-64c2673c3b44",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "1708608c-3f55-4ac1-bfee-da15e0df3e6f",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(505),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(502),
                            DrinkTypeId = "26643d20-a570-4445-a740-30dbd63db95c",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "58d70492-d9dd-4f16-89f0-11e233bbada6",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(512),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(509),
                            DrinkTypeId = "26643d20-a570-4445-a740-30dbd63db95c",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "0d5a41c5-3b9e-4a02-910b-f557047bbbfd",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(518),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(516),
                            DrinkTypeId = "19c5ceee-2b51-4558-b1cd-0a8da5b4974c",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "5ebfa2e2-f36e-446b-891e-a9b096209709",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(527),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(525),
                            DrinkTypeId = "19c5ceee-2b51-4558-b1cd-0a8da5b4974c",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "b5666e76-3aeb-4233-8bd0-57d8c94a1f98",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(399),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(396),
                            Name = "Coffee",
                            ShopId = "0aa74225-2ecb-4228-acac-639514e79942"
                        },
                        new
                        {
                            Id = "943e89dd-4536-4eb1-bfd6-64c2673c3b44",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(406),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(403),
                            Name = "Tea",
                            ShopId = "0aa74225-2ecb-4228-acac-639514e79942"
                        },
                        new
                        {
                            Id = "26643d20-a570-4445-a740-30dbd63db95c",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(413),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(410),
                            Name = "Smoothie",
                            ShopId = "0aa74225-2ecb-4228-acac-639514e79942"
                        },
                        new
                        {
                            Id = "19c5ceee-2b51-4558-b1cd-0a8da5b4974c",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(422),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(420),
                            Name = "Juice",
                            ShopId = "0aa74225-2ecb-4228-acac-639514e79942"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(551),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(552),
                            ExpiryDate = new DateTime(2024, 6, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(554),
                            Image = "",
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(561),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(563),
                            ExpiryDate = new DateTime(2024, 7, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(564),
                            Image = "",
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "65bdefba-c566-4ff7-8448-7f4ecb426e0d",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(584),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(586),
                            DrinkId = "6642448b-5b38-4118-876d-abf11ffaad4f",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "1a192b6b-cc0a-43c5-9f13-f34f740b1be7",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(594),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(595),
                            DrinkId = "6642448b-5b38-4118-876d-abf11ffaad4f",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "e5d7ba7a-9554-4f49-8c38-7b15dc828b98",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(600),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(602),
                            DrinkId = "b1f51f4f-e9d5-4229-a424-a9e6f4a1dbbc",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "a9440b2f-ac77-4585-8087-5d73a55ea9b5",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(607),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(608),
                            DrinkId = "b1f51f4f-e9d5-4229-a424-a9e6f4a1dbbc",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "4e2a49ec-3801-4ece-862c-adf12af289d6",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(614),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(615),
                            DrinkId = "6bcf7a66-7c11-4d74-878a-4822ee48653c",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "a7e14299-d73b-4554-8259-929d56c6f113",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(622),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(623),
                            DrinkId = "6bcf7a66-7c11-4d74-878a-4822ee48653c",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "4760813c-aecd-4c66-96d8-06545f5b61c8",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(628),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(630),
                            DrinkId = "78d3d15c-bcfe-4dc6-ad01-fee604f707f1",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "484175fc-cbb4-4f6e-b8dc-5fca9243a6ca",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(634),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(636),
                            DrinkId = "78d3d15c-bcfe-4dc6-ad01-fee604f707f1",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "2ac0b68c-d4ac-4386-902d-6bc892332f43",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(641),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(670),
                            DrinkId = "1708608c-3f55-4ac1-bfee-da15e0df3e6f",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "dfa2339a-4ff0-44f2-82b6-96872267ad61",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(678),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(680),
                            DrinkId = "1708608c-3f55-4ac1-bfee-da15e0df3e6f",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "55587ed8-4287-4629-89e7-5586af1ab721",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(685),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(687),
                            DrinkId = "58d70492-d9dd-4f16-89f0-11e233bbada6",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "4d7f5400-58a9-46ce-97b4-02d6008359c4",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(691),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(693),
                            DrinkId = "58d70492-d9dd-4f16-89f0-11e233bbada6",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "374e2a6d-280b-4d3c-84a3-a20bdf6b024b",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(698),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(699),
                            DrinkId = "0d5a41c5-3b9e-4a02-910b-f557047bbbfd",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "bd5c336d-6725-4cd2-b10c-5aae5275b8d9",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(706),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(707),
                            DrinkId = "0d5a41c5-3b9e-4a02-910b-f557047bbbfd",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "5335f977-d603-435a-9aa0-8b5e753ae116",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(712),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(714),
                            DrinkId = "5ebfa2e2-f36e-446b-891e-a9b096209709",
                            IngredientId = "daa36d1f-b6fa-4630-b37a-3301ca7bffd7",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "7b3c70db-d0c2-4bff-a21d-b2994aabacd3",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(719),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(720),
                            DrinkId = "5ebfa2e2-f36e-446b-891e-a9b096209709",
                            IngredientId = "60d11f02-4aa0-4059-a362-2646dc5121d7",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "7e374c8a-290e-4908-9f0f-9a781e28f407",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Local).AddTicks(758),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(754),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "8bd29ab4-ee89-40b0-b03e-1d4fb204822d"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "7c73aff1-9a45-45e1-9582-409892b3faf9",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(776),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(778),
                            DrinkId = "6642448b-5b38-4118-876d-abf11ffaad4f",
                            OrderId = "7e374c8a-290e-4908-9f0f-9a781e28f407",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "0aa74225-2ecb-4228-acac-639514e79942",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(360),
                            DateModified = new DateTime(2024, 5, 24, 13, 57, 17, 968, DateTimeKind.Unspecified).AddTicks(383),
                            IsApproved = true,
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "8bd29ab4-ee89-40b0-b03e-1d4fb204822d",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "fc5629bf-561b-4ec2-af6a-c61044846980",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8bd29ab4-ee89-40b0-b03e-1d4fb204822d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8bd29ab4-ee89-40b0-b03e-1d4fb204822d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "745cbc38-5ddf-46ae-924f-5219349ffa3e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOD5BZyViUu9EbrrOjYucMRQymbw83sjqFElWzITJ1BmQ+X7JSyB5TSCugwxyWbdZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b41efd5-976e-4487-9fa9-822e70cdd8b6",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
