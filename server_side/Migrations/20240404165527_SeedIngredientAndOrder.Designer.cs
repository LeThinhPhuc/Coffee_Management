// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240404165527_SeedIngredientAndOrder")]
    partial class SeedIngredientAndOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "00e4f34a-f704-4a29-9ba9-7d5964b3199a",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1680),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1670),
                            DrinkTypeId = "3d456eec-ea33-4b01-88bf-90d8a74873a7",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "cd1f5f60-22d4-4e85-891c-88a5e2f400eb",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1750),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1730),
                            DrinkTypeId = "3d456eec-ea33-4b01-88bf-90d8a74873a7",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "a42d4c77-29c9-429d-9734-a55159023769",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1810),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1800),
                            DrinkTypeId = "b6a00992-f80f-44b9-9c2c-cc9fdb0f4041",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "53280b04-0a65-457d-82e1-e20a35a43778",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1880),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1870),
                            DrinkTypeId = "b6a00992-f80f-44b9-9c2c-cc9fdb0f4041",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "80190a5b-5b99-43ae-8e59-9c0ec1927ebc",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1940),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1930),
                            DrinkTypeId = "4be8424e-7de7-458b-ae36-c45aa7d40286",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "80477527-812f-4464-8100-e4ea46da0141",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(2070),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2060),
                            DrinkTypeId = "4be8424e-7de7-458b-ae36-c45aa7d40286",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "e156734c-76a1-4cce-b400-95e6f243bbda",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(2130),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2120),
                            DrinkTypeId = "8aff5769-18dc-4487-9ff9-ca88a3d2d18c",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "74fbcb1b-91bc-400e-99a4-b47e1b67cf00",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(2200),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2190),
                            DrinkTypeId = "8aff5769-18dc-4487-9ff9-ca88a3d2d18c",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "3d456eec-ea33-4b01-88bf-90d8a74873a7",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1300),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1290),
                            Name = "Coffee",
                            ShopId = "42f2678a-004f-4f85-b00b-bc4223ca4041"
                        },
                        new
                        {
                            Id = "b6a00992-f80f-44b9-9c2c-cc9fdb0f4041",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1360),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1350),
                            Name = "Tea",
                            ShopId = "42f2678a-004f-4f85-b00b-bc4223ca4041"
                        },
                        new
                        {
                            Id = "4be8424e-7de7-458b-ae36-c45aa7d40286",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1420),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1410),
                            Name = "Smoothie",
                            ShopId = "42f2678a-004f-4f85-b00b-bc4223ca4041"
                        },
                        new
                        {
                            Id = "8aff5769-18dc-4487-9ff9-ca88a3d2d18c",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(1560),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1470),
                            Name = "Juice",
                            ShopId = "42f2678a-004f-4f85-b00b-bc4223ca4041"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2300),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2340),
                            ExpiryDate = new DateTime(2024, 5, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(2350),
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "af775785-e084-4600-99b4-6f6db460f760",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2400),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2440),
                            ExpiryDate = new DateTime(2024, 6, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(2450),
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "f70f42cb-6eec-40ff-bfa5-aaf1c01aba8a",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2610),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(2700),
                            DrinkId = "00e4f34a-f704-4a29-9ba9-7d5964b3199a",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "89436eac-b4c7-49e4-b2e2-909896bb83d6",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(3010),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(3170),
                            DrinkId = "00e4f34a-f704-4a29-9ba9-7d5964b3199a",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "64f938c4-b39c-4f70-8782-58cc98a0b698",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(3340),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(3530),
                            DrinkId = "cd1f5f60-22d4-4e85-891c-88a5e2f400eb",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "7e15ad5c-e791-47e5-95fb-39ea50b33f0a",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(3700),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(3890),
                            DrinkId = "cd1f5f60-22d4-4e85-891c-88a5e2f400eb",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "1776c6b4-619d-4e4a-b2ab-20abf5d67b67",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4070),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4160),
                            DrinkId = "a42d4c77-29c9-429d-9734-a55159023769",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "c92ef9e6-e7c5-4ca4-b1f6-9dd1f01c258b",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4230),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4270),
                            DrinkId = "a42d4c77-29c9-429d-9734-a55159023769",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "bf4d130e-6d96-45c1-a0fd-5a47cc8b5ac5",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4320),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4790),
                            DrinkId = "53280b04-0a65-457d-82e1-e20a35a43778",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "505bb2bf-3827-4575-9e36-a598f8348a39",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4940),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(4960),
                            DrinkId = "53280b04-0a65-457d-82e1-e20a35a43778",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "16fd48bd-3fec-4776-ad14-9bec2097baf5",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5000),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5030),
                            DrinkId = "80190a5b-5b99-43ae-8e59-9c0ec1927ebc",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "41be01e1-e686-4ff8-b3c8-ef114bc1cfd9",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5070),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5100),
                            DrinkId = "80190a5b-5b99-43ae-8e59-9c0ec1927ebc",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "d3a700f3-9491-43c9-a877-788810f7e121",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5130),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5160),
                            DrinkId = "80477527-812f-4464-8100-e4ea46da0141",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "4f855160-1f77-4cc5-8dfa-cc5da5ab4ab6",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5190),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5220),
                            DrinkId = "80477527-812f-4464-8100-e4ea46da0141",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "b0a21988-e0e9-4250-a92c-c28e2014481e",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5250),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5340),
                            DrinkId = "e156734c-76a1-4cce-b400-95e6f243bbda",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "702ea9fa-1ef3-4d7d-8583-3de4033f7e93",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5390),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5410),
                            DrinkId = "e156734c-76a1-4cce-b400-95e6f243bbda",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "0dcf428c-4659-4e9b-b6ee-925521fd718b",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5450),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5470),
                            DrinkId = "74fbcb1b-91bc-400e-99a4-b47e1b67cf00",
                            IngredientId = "50a6f2a0-54e8-4ff3-a952-a99cda0c8e29",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "697e6b3b-43a5-4833-bc98-01933ace3af6",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5510),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5530),
                            DrinkId = "74fbcb1b-91bc-400e-99a4-b47e1b67cf00",
                            IngredientId = "af775785-e084-4600-99b4-6f6db460f760",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "268ce34b-48d6-4e09-a954-4e9322e413f1",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Local).AddTicks(5720),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5710),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "2fcc7b1d-8708-4d7f-9189-a4ce6cb53360"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "7bafb072-ccb9-47bf-be5f-e1bd9948b509",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5790),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(5820),
                            DrinkId = "00e4f34a-f704-4a29-9ba9-7d5964b3199a",
                            OrderId = "268ce34b-48d6-4e09-a954-4e9322e413f1",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "42f2678a-004f-4f85-b00b-bc4223ca4041",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1080),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1140),
                            Name = "Coffee House",
                            OwnerId = "2fcc7b1d-8708-4d7f-9189-a4ce6cb53360",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "c0a1d224-0126-4f64-9235-684ac70d12c9",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1190),
                            DateModified = new DateTime(2024, 4, 4, 23, 55, 26, 628, DateTimeKind.Unspecified).AddTicks(1210),
                            Name = "Tea Shop",
                            OwnerId = "2fcc7b1d-8708-4d7f-9189-a4ce6cb53360",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "2fcc7b1d-8708-4d7f-9189-a4ce6cb53360",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ee91795-478c-44eb-b6fb-00dc9cb88dbf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEkJcUlbE3c5nXk2z0+dvCrEqgONMNE0KdeDBWHnrPq9MZt2C1HrCOYHvLl44S340g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46a80db9-5975-40ef-9f61-8ade85b8a481",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
