// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240522014417_lethinhphuc")]
    partial class lethinhphuc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "3d6fbfb1-7a8d-48d8-b6a7-0b5df835329a",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3931),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3927),
                            DrinkTypeId = "fed3ecb4-6715-4700-b423-7c4f2c418ab1",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "e30e30f9-b75d-43ab-98d1-565faf2914c2",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3947),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3942),
                            DrinkTypeId = "fed3ecb4-6715-4700-b423-7c4f2c418ab1",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "5e8e1e33-21c5-400d-87c0-3fcf241d37c8",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3958),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3954),
                            DrinkTypeId = "4422078a-7da0-442b-9c85-9a16f97bbbab",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "3df8bbf3-2e23-4f9f-a02a-98d0d60564b2",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3969),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3965),
                            DrinkTypeId = "4422078a-7da0-442b-9c85-9a16f97bbbab",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "f7203135-9efa-43b4-a29d-cb9dd76046d9",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3979),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3975),
                            DrinkTypeId = "27d8d448-8230-4d80-890f-de44ca4601d7",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "5e142c15-e5fa-4cc0-9795-793163c8f8ab",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3994),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3990),
                            DrinkTypeId = "27d8d448-8230-4d80-890f-de44ca4601d7",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "f6f8a9df-b090-484c-a357-9260fc5cba6d",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(4005),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4001),
                            DrinkTypeId = "ebdaee8e-2484-4d6f-a285-bee03ec18ea3",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "5533014c-6779-4c73-b6f5-6eeeabeeba2c",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(4020),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4013),
                            DrinkTypeId = "ebdaee8e-2484-4d6f-a285-bee03ec18ea3",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "fed3ecb4-6715-4700-b423-7c4f2c418ab1",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3882),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3879),
                            Name = "Coffee",
                            ShopId = "ea4a38cb-96d3-47bd-a1b2-72b8ae5dc28f"
                        },
                        new
                        {
                            Id = "4422078a-7da0-442b-9c85-9a16f97bbbab",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3894),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3891),
                            Name = "Tea",
                            ShopId = "ea4a38cb-96d3-47bd-a1b2-72b8ae5dc28f"
                        },
                        new
                        {
                            Id = "27d8d448-8230-4d80-890f-de44ca4601d7",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3901),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3899),
                            Name = "Smoothie",
                            ShopId = "ea4a38cb-96d3-47bd-a1b2-72b8ae5dc28f"
                        },
                        new
                        {
                            Id = "ebdaee8e-2484-4d6f-a285-bee03ec18ea3",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(3909),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3906),
                            Name = "Juice",
                            ShopId = "ea4a38cb-96d3-47bd-a1b2-72b8ae5dc28f"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4056),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4057),
                            ExpiryDate = new DateTime(2024, 6, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(4059),
                            Image = "",
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4067),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4068),
                            ExpiryDate = new DateTime(2024, 7, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(4069),
                            Image = "",
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "ae0f61ae-d9c0-4fc4-935f-79430c58887d",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4133),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4136),
                            DrinkId = "3d6fbfb1-7a8d-48d8-b6a7-0b5df835329a",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "67fc9e83-34a4-40e6-a9ec-ae8cbe1d6877",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4145),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4148),
                            DrinkId = "3d6fbfb1-7a8d-48d8-b6a7-0b5df835329a",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "6c508d21-a777-404c-8c04-10a2b74c6f35",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4156),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4159),
                            DrinkId = "e30e30f9-b75d-43ab-98d1-565faf2914c2",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "93a483d4-fe3c-4473-9f5f-7f4dc8d797c5",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4170),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4173),
                            DrinkId = "e30e30f9-b75d-43ab-98d1-565faf2914c2",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "851aefa2-dd55-4d2b-b5b8-9272c9442b23",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4181),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4184),
                            DrinkId = "5e8e1e33-21c5-400d-87c0-3fcf241d37c8",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "2717ecc0-0880-4570-8945-3e5262a67c4b",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4192),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4195),
                            DrinkId = "5e8e1e33-21c5-400d-87c0-3fcf241d37c8",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "5c51fcfb-834a-4574-85e7-d6878aa87e7f",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4202),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4205),
                            DrinkId = "3df8bbf3-2e23-4f9f-a02a-98d0d60564b2",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "facc3c7c-0a90-49f2-adab-f3a3e34ce9ed",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4216),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4219),
                            DrinkId = "3df8bbf3-2e23-4f9f-a02a-98d0d60564b2",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "dd9e1099-5ae6-4c87-9082-0f0723afc29e",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4226),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4229),
                            DrinkId = "f7203135-9efa-43b4-a29d-cb9dd76046d9",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "0d8704cf-8922-407e-b2d4-10cb2555cc0f",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4238),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4240),
                            DrinkId = "f7203135-9efa-43b4-a29d-cb9dd76046d9",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "2f2b5bdb-f6a3-4041-a9a5-654488c48630",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4248),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4251),
                            DrinkId = "5e142c15-e5fa-4cc0-9795-793163c8f8ab",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "638c15ba-1cc4-421d-9231-fe900339ace4",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4271),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4274),
                            DrinkId = "5e142c15-e5fa-4cc0-9795-793163c8f8ab",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "6069bb32-6b63-484e-8283-b944d7efe851",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4281),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4284),
                            DrinkId = "f6f8a9df-b090-484c-a357-9260fc5cba6d",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "159bdeaa-c527-425e-9e0e-ac5a1addd412",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4290),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4294),
                            DrinkId = "f6f8a9df-b090-484c-a357-9260fc5cba6d",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "a03cebf8-f002-485b-a95a-038b3bef7c6a",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4301),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4307),
                            DrinkId = "5533014c-6779-4c73-b6f5-6eeeabeeba2c",
                            IngredientId = "21cae515-4279-4efc-bab5-7e3f18a6acf4",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "31208040-db51-42ca-a5ea-224237e16fbd",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4326),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4329),
                            DrinkId = "5533014c-6779-4c73-b6f5-6eeeabeeba2c",
                            IngredientId = "23c5b606-17a1-4716-b13a-8c66c63d1932",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "69008730-df49-4a99-b8e0-dd1cf5b9b559",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Local).AddTicks(4470),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4466),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "08c20115-9d1a-4441-91c4-62bdb440a1b0"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "04fb0c36-f0c9-4c29-8bf5-a40b29cada53",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4516),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(4518),
                            DrinkId = "3d6fbfb1-7a8d-48d8-b6a7-0b5df835329a",
                            OrderId = "69008730-df49-4a99-b8e0-dd1cf5b9b559",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "ea4a38cb-96d3-47bd-a1b2-72b8ae5dc28f",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3834),
                            DateModified = new DateTime(2024, 5, 22, 8, 44, 17, 418, DateTimeKind.Unspecified).AddTicks(3864),
                            IsApproved = true,
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "08c20115-9d1a-4441-91c4-62bdb440a1b0",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "839ee058-7896-4821-ba42-9340d10c1995",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "08c20115-9d1a-4441-91c4-62bdb440a1b0",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "08c20115-9d1a-4441-91c4-62bdb440a1b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a320ada-595a-4beb-8e91-46e0ee5a5b97",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELW8xyUQPGVquXfC8EhlieTPCzeLR+U+rsIu/IR13qX0bV5FHpCHW62ZeeEvGYaufg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86e57052-7bd7-4c37-b9dd-7b8df1aa479c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
