// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240513151514_TuanhayhoAddShopApproval")]
    partial class TuanhayhoAddShopApproval
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "35d0d54a-108d-4513-9fa8-ffceb5250bca",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(7060),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(7040),
                            DrinkTypeId = "6f0185c1-5bbc-4767-98cc-5531a9f77ed0",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "e5b8a1b3-8642-4e89-ad36-eebf60fcafdb",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(7150),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(7140),
                            DrinkTypeId = "6f0185c1-5bbc-4767-98cc-5531a9f77ed0",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "31194bc3-10ab-40d1-be22-100969a5f78c",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(7660),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(7650),
                            DrinkTypeId = "a4abfcdd-ca97-40bc-841b-d00f194f6d93",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "73bcbd3f-342f-4a06-9923-fafb7058f5af",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(7730),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(7720),
                            DrinkTypeId = "a4abfcdd-ca97-40bc-841b-d00f194f6d93",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "0706fcb3-ef4b-4e0d-bd51-c5cdfc4d8551",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(7820),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(7810),
                            DrinkTypeId = "06269547-cc6a-4b19-8287-d9cad5198552",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "1ccb63ae-ad62-4d79-a36a-4b61f079474d",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(7910),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(7880),
                            DrinkTypeId = "06269547-cc6a-4b19-8287-d9cad5198552",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "9498e774-532c-48c5-8073-ebaf0f33d8aa",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(7990),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(7980),
                            DrinkTypeId = "74d06fbe-938a-4c5f-abb5-8f712c05c84d",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "0d8af8ac-6eca-4291-b109-9bada864fffb",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(8060),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8050),
                            DrinkTypeId = "74d06fbe-938a-4c5f-abb5-8f712c05c84d",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "6f0185c1-5bbc-4767-98cc-5531a9f77ed0",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(6650),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6640),
                            Name = "Coffee",
                            ShopId = "90011592-4548-42e0-829a-8d2d43031f85"
                        },
                        new
                        {
                            Id = "a4abfcdd-ca97-40bc-841b-d00f194f6d93",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(6740),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6730),
                            Name = "Tea",
                            ShopId = "90011592-4548-42e0-829a-8d2d43031f85"
                        },
                        new
                        {
                            Id = "06269547-cc6a-4b19-8287-d9cad5198552",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(6850),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6830),
                            Name = "Smoothie",
                            ShopId = "90011592-4548-42e0-829a-8d2d43031f85"
                        },
                        new
                        {
                            Id = "74d06fbe-938a-4c5f-abb5-8f712c05c84d",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(6920),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6910),
                            Name = "Juice",
                            ShopId = "90011592-4548-42e0-829a-8d2d43031f85"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8220),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8310),
                            ExpiryDate = new DateTime(2024, 6, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(8330),
                            Image = "",
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8370),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8410),
                            ExpiryDate = new DateTime(2024, 7, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(8410),
                            Image = "",
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "6ecf0b42-59c4-4ca6-a079-9558e22da916",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8490),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8520),
                            DrinkId = "35d0d54a-108d-4513-9fa8-ffceb5250bca",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "36f28b51-ce88-4576-8830-d0dd8f8b8df1",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8560),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8590),
                            DrinkId = "35d0d54a-108d-4513-9fa8-ffceb5250bca",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "f61ec0e6-21ee-4398-914d-4803e98e16dd",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8630),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8650),
                            DrinkId = "e5b8a1b3-8642-4e89-ad36-eebf60fcafdb",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "2b86a770-6e79-43e0-8b7b-e6c85bf6ae71",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8690),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8780),
                            DrinkId = "e5b8a1b3-8642-4e89-ad36-eebf60fcafdb",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "829a7cff-9c6e-4689-afe6-17fe45140d9e",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8840),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8870),
                            DrinkId = "31194bc3-10ab-40d1-be22-100969a5f78c",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "7628a76e-445e-428b-9c79-dede03eaad21",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8910),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8940),
                            DrinkId = "31194bc3-10ab-40d1-be22-100969a5f78c",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "b47243c8-fdf7-4ca3-8cf9-01d43378e562",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(8970),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9000),
                            DrinkId = "73bcbd3f-342f-4a06-9923-fafb7058f5af",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "73675e4a-1827-4231-bc8f-a25b36d080cb",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9040),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9070),
                            DrinkId = "73bcbd3f-342f-4a06-9923-fafb7058f5af",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "5d4f2595-16d9-4bb0-a96c-1adef29d600b",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9110),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9140),
                            DrinkId = "0706fcb3-ef4b-4e0d-bd51-c5cdfc4d8551",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "969faeec-9228-49a7-b7e1-ed4bf7a277bc",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9170),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9260),
                            DrinkId = "0706fcb3-ef4b-4e0d-bd51-c5cdfc4d8551",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "454e8ec2-9cd5-45f3-9090-ccc3ba83f3a9",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9300),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9330),
                            DrinkId = "1ccb63ae-ad62-4d79-a36a-4b61f079474d",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "fb589fb3-a6c2-435a-bd60-c3ad3e87a30c",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9370),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9390),
                            DrinkId = "1ccb63ae-ad62-4d79-a36a-4b61f079474d",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "f94a4d0b-c306-42f6-b910-2bad0dd1a23f",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9440),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9470),
                            DrinkId = "9498e774-532c-48c5-8073-ebaf0f33d8aa",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "240c19e8-93c4-4cc2-a467-2eb4d5e13e8b",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9510),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9530),
                            DrinkId = "9498e774-532c-48c5-8073-ebaf0f33d8aa",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "1d521b95-0d0f-4228-a38e-3188312bd0c4",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9570),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9600),
                            DrinkId = "0d8af8ac-6eca-4291-b109-9bada864fffb",
                            IngredientId = "2db8e3f6-c75f-40c9-96cf-217255b44cd2",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "d37690aa-9657-47e2-ae23-bf1dd95941c8",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9640),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9720),
                            DrinkId = "0d8af8ac-6eca-4291-b109-9bada864fffb",
                            IngredientId = "89e9a228-bf56-4489-992c-f8a17bd9fab8",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "d617983e-1562-47c0-86a1-a75c7554a554",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Local).AddTicks(9880),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9870),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "31ee1d5d-c262-4c09-9b5d-fe09e316d8ee"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "8059e902-dc25-4fdc-ad43-42509a4f9ec7",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9940),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(9970),
                            DrinkId = "35d0d54a-108d-4513-9fa8-ffceb5250bca",
                            OrderId = "d617983e-1562-47c0-86a1-a75c7554a554",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "90011592-4548-42e0-829a-8d2d43031f85",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6220),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6310),
                            IsApproved = true,
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "31ee1d5d-c262-4c09-9b5d-fe09e316d8ee",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "5052eaaf-9635-4345-9281-181a8ed460dc",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6350),
                            DateModified = new DateTime(2024, 5, 13, 22, 15, 13, 248, DateTimeKind.Unspecified).AddTicks(6400),
                            IsApproved = false,
                            IsSuspended = false,
                            Name = "Tea Shop",
                            OwnerId = "31ee1d5d-c262-4c09-9b5d-fe09e316d8ee",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "16a827cd-e00e-4ebd-8733-ae166efb8ae8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "31ee1d5d-c262-4c09-9b5d-fe09e316d8ee",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "31ee1d5d-c262-4c09-9b5d-fe09e316d8ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48dff044-51b2-47fc-b13e-fed582f4691c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPfl92zP/i/rkWwVRTZAUHrckl7/RiLvKgsvHtCN5DsoTNSpjx03jmDEjAUsyZAXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed10e1f7-879e-47da-aebb-9dddb4801920",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
