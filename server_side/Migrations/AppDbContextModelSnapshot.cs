// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "2322f146-21a4-4143-8086-2f8471a2dee4",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9087),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9083),
                            DrinkTypeId = "1c26b2bb-2557-42c3-9aa5-de0c69edf697",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "94a9c940-5629-4182-a3b4-7b616dcfd7c3",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9096),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9093),
                            DrinkTypeId = "1c26b2bb-2557-42c3-9aa5-de0c69edf697",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "f1b244e2-9661-48b1-9c6b-efd9dda6b9c6",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9103),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9100),
                            DrinkTypeId = "b45901ec-9249-412c-82a7-8a6b0ae1dab7",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "4714e837-3a76-4ceb-96b4-880eb10afb94",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9112),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9108),
                            DrinkTypeId = "b45901ec-9249-412c-82a7-8a6b0ae1dab7",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "e91339db-4b26-4b6d-94bb-23e8cc98257f",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9119),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9116),
                            DrinkTypeId = "a332eb73-716d-47c9-8523-c08babfe6adf",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "544759e1-8cff-4722-8a06-aabec2961d88",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9126),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9123),
                            DrinkTypeId = "a332eb73-716d-47c9-8523-c08babfe6adf",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "44cafd9b-8cdd-4b71-a874-45077d9b3a80",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9133),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9130),
                            DrinkTypeId = "ae1da9de-85ff-42f0-94fb-bdb1c0b3d07c",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "dfa6446e-0c18-41cc-be40-1a40d6f88e49",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9142),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9138),
                            DrinkTypeId = "ae1da9de-85ff-42f0-94fb-bdb1c0b3d07c",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "1c26b2bb-2557-42c3-9aa5-de0c69edf697",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9034),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9031),
                            Name = "Coffee",
                            ShopId = "a47b17af-aac3-4fe3-a949-3e3df66bb9e9"
                        },
                        new
                        {
                            Id = "b45901ec-9249-412c-82a7-8a6b0ae1dab7",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9045),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9041),
                            Name = "Tea",
                            ShopId = "a47b17af-aac3-4fe3-a949-3e3df66bb9e9"
                        },
                        new
                        {
                            Id = "a332eb73-716d-47c9-8523-c08babfe6adf",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9052),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9049),
                            Name = "Smoothie",
                            ShopId = "a47b17af-aac3-4fe3-a949-3e3df66bb9e9"
                        },
                        new
                        {
                            Id = "ae1da9de-85ff-42f0-94fb-bdb1c0b3d07c",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9061),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9056),
                            Name = "Juice",
                            ShopId = "a47b17af-aac3-4fe3-a949-3e3df66bb9e9"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9178),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9180),
                            ExpiryDate = new DateTime(2024, 6, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9182),
                            Image = "",
                            Name = "Milk",
                            ShopId = "a47b17af-aac3-4fe3-a949-3e3df66bb9e9"
                        },
                        new
                        {
                            Id = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9196),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9197),
                            ExpiryDate = new DateTime(2024, 7, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9198),
                            Image = "",
                            Name = "Sugar",
                            ShopId = "a47b17af-aac3-4fe3-a949-3e3df66bb9e9"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "8b5df5e4-061e-40d4-a709-855f8b133fa6",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9258),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9260),
                            DrinkId = "2322f146-21a4-4143-8086-2f8471a2dee4",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "cac9aab9-1100-4fe8-81b7-378169130eb8",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9267),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9269),
                            DrinkId = "2322f146-21a4-4143-8086-2f8471a2dee4",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "8d052d86-6fb5-4c82-b8c4-14bf57b9ff98",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9278),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9280),
                            DrinkId = "94a9c940-5629-4182-a3b4-7b616dcfd7c3",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "df129e0a-0076-4d67-a953-9001a0b00bab",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9286),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9287),
                            DrinkId = "94a9c940-5629-4182-a3b4-7b616dcfd7c3",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "7f71267b-120d-4165-8843-7a14e8923730",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9292),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9294),
                            DrinkId = "f1b244e2-9661-48b1-9c6b-efd9dda6b9c6",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "1273f3ed-85fd-4ccf-b3d2-8b0a19e4d89f",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9299),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9300),
                            DrinkId = "f1b244e2-9661-48b1-9c6b-efd9dda6b9c6",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "1cf3e10e-a5f4-4fce-a35f-423ae5614740",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9308),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9309),
                            DrinkId = "4714e837-3a76-4ceb-96b4-880eb10afb94",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "1a58b40d-940a-4444-9f8e-1d927a0a1bc8",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9314),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9316),
                            DrinkId = "4714e837-3a76-4ceb-96b4-880eb10afb94",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "b3de16a7-2e28-4464-90e1-40884da147e9",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9320),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9322),
                            DrinkId = "e91339db-4b26-4b6d-94bb-23e8cc98257f",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "619887d9-05f1-4e41-8312-6c89571c6913",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9326),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9328),
                            DrinkId = "e91339db-4b26-4b6d-94bb-23e8cc98257f",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "f3e31f96-2b14-4249-97de-e44bee7db23c",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9334),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9336),
                            DrinkId = "544759e1-8cff-4722-8a06-aabec2961d88",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "98c141d9-725b-4bc0-b7ec-f8780159609a",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9341),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9342),
                            DrinkId = "544759e1-8cff-4722-8a06-aabec2961d88",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "612e7033-c207-48e5-b6f9-ca30ff4773a9",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9347),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9348),
                            DrinkId = "44cafd9b-8cdd-4b71-a874-45077d9b3a80",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "728a25e7-1681-42c3-b4e0-6d16d354a905",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9353),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9354),
                            DrinkId = "44cafd9b-8cdd-4b71-a874-45077d9b3a80",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "5785a0bd-f71c-4670-9c48-b6846ccf955f",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9361),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9363),
                            DrinkId = "dfa6446e-0c18-41cc-be40-1a40d6f88e49",
                            IngredientId = "cd16ed64-905e-4423-8f9d-7c68f68b4ca1",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "53959615-f0f5-43a6-b1c2-f2b052d8f2b1",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9368),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9369),
                            DrinkId = "dfa6446e-0c18-41cc-be40-1a40d6f88e49",
                            IngredientId = "2e3b6fbf-b8ac-41a3-8d98-fc091c9a0033",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "fc1058ce-4b36-4ecf-8336-c9af0dce9194",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Local).AddTicks(9421),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9417),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "bb036584-9aa7-405c-a31d-af5ab976d005"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "45fed8ab-f046-47b5-84a3-d6f87edfd80b",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9482),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9484),
                            DrinkId = "2322f146-21a4-4143-8086-2f8471a2dee4",
                            OrderId = "fc1058ce-4b36-4ecf-8336-c9af0dce9194",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "a47b17af-aac3-4fe3-a949-3e3df66bb9e9",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(8983),
                            DateModified = new DateTime(2024, 5, 27, 9, 51, 20, 520, DateTimeKind.Unspecified).AddTicks(9018),
                            IsApproved = true,
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "bb036584-9aa7-405c-a31d-af5ab976d005",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "7feae159-74fc-4698-a3ef-a2f6849ce7d4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bb036584-9aa7-405c-a31d-af5ab976d005",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "bb036584-9aa7-405c-a31d-af5ab976d005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "089cb02f-9ce7-4f2a-8958-8d4e714aeaeb",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECJCwsdhcLh5DyFVdmGA8pto5Z4+tgCph1XSo6wbC/8sPHAxeE9olg7DgJS491pJKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bbb48e0-818a-4d76-869c-07533528e296",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
