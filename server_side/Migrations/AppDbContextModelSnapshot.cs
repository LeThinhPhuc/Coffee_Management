// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "d4fa0a6b-85cf-4c75-9441-2c4a18ea90b8",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(4030),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(4010),
                            DrinkTypeId = "1bf870cc-ecb4-4ce6-a346-ab34e74256c7",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "212fa5cd-d7e4-4f15-b3de-06363d118d83",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(4180),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(4160),
                            DrinkTypeId = "1bf870cc-ecb4-4ce6-a346-ab34e74256c7",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "9f2c2d40-924f-46c7-8472-0a11aa8e79f8",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(4330),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(4310),
                            DrinkTypeId = "8044af65-23f8-46ca-9dc2-bc6e67f21c9a",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "9635d175-6be2-4934-96b1-62a2b61a2286",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(4440),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(4430),
                            DrinkTypeId = "8044af65-23f8-46ca-9dc2-bc6e67f21c9a",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "bf2304a5-eef3-4437-8d61-61db75955e93",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(4570),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(4550),
                            DrinkTypeId = "22890f84-e987-4220-8dca-dd89192c22a6",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "8c5c8eed-1bd7-405c-aef1-8c5d39a47875",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(4700),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(4680),
                            DrinkTypeId = "22890f84-e987-4220-8dca-dd89192c22a6",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "74da8fd9-4935-40e4-9d5c-1b6e45f91763",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(5350),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(5290),
                            DrinkTypeId = "efcf53a7-c527-4f41-9875-d986c9d5423f",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "606a7ee8-bd65-44c4-b25e-c1959cf1e364",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(5510),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(5490),
                            DrinkTypeId = "efcf53a7-c527-4f41-9875-d986c9d5423f",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "1bf870cc-ecb4-4ce6-a346-ab34e74256c7",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(3300),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(3280),
                            Name = "Coffee",
                            ShopId = "30b3df68-dc5c-47fa-b75a-9cb92f722896"
                        },
                        new
                        {
                            Id = "8044af65-23f8-46ca-9dc2-bc6e67f21c9a",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(3450),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(3430),
                            Name = "Tea",
                            ShopId = "30b3df68-dc5c-47fa-b75a-9cb92f722896"
                        },
                        new
                        {
                            Id = "22890f84-e987-4220-8dca-dd89192c22a6",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(3570),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(3560),
                            Name = "Smoothie",
                            ShopId = "30b3df68-dc5c-47fa-b75a-9cb92f722896"
                        },
                        new
                        {
                            Id = "efcf53a7-c527-4f41-9875-d986c9d5423f",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(3730),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(3710),
                            Name = "Juice",
                            ShopId = "30b3df68-dc5c-47fa-b75a-9cb92f722896"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(5690),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(5730),
                            ExpiryDate = new DateTime(2024, 6, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(5740),
                            Image = "",
                            Name = "Milk",
                            ShopId = "30b3df68-dc5c-47fa-b75a-9cb92f722896"
                        },
                        new
                        {
                            Id = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(5790),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(5910),
                            ExpiryDate = new DateTime(2024, 7, 25, 22, 2, 6, 86, DateTimeKind.Local).AddTicks(5940),
                            Image = "",
                            Name = "Sugar",
                            ShopId = "30b3df68-dc5c-47fa-b75a-9cb92f722896"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "149e6e87-f1a6-4095-962c-39117b3f3956",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(9830),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(9980),
                            DrinkId = "d4fa0a6b-85cf-4c75-9441-2c4a18ea90b8",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "e50716db-e1df-4979-aad0-63614917d19b",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(200),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(340),
                            DrinkId = "d4fa0a6b-85cf-4c75-9441-2c4a18ea90b8",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "bf05d411-c02e-43e9-b68c-2d347586a728",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(730),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(840),
                            DrinkId = "212fa5cd-d7e4-4f15-b3de-06363d118d83",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "ed059c91-cbbf-4298-93c3-a3c995339c39",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(910),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(960),
                            DrinkId = "212fa5cd-d7e4-4f15-b3de-06363d118d83",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "0c9775fb-859a-450e-9a5a-d6b18cfb7204",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1020),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1070),
                            DrinkId = "9f2c2d40-924f-46c7-8472-0a11aa8e79f8",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "d4706e42-e18a-4287-a09b-08ca23d308af",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1210),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1370),
                            DrinkId = "9f2c2d40-924f-46c7-8472-0a11aa8e79f8",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "3baaa59a-57e7-417e-a0b6-97104c97cfb2",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1530),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1650),
                            DrinkId = "9635d175-6be2-4934-96b1-62a2b61a2286",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "9cdaa25d-8f25-420e-bb0d-8141f3da5555",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1800),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(1990),
                            DrinkId = "9635d175-6be2-4934-96b1-62a2b61a2286",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "072e88d6-9507-4b56-ab81-96a8e41cfe8a",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2090),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2140),
                            DrinkId = "bf2304a5-eef3-4437-8d61-61db75955e93",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "88306978-a787-4e09-930c-4ea6549d98f9",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2210),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2260),
                            DrinkId = "bf2304a5-eef3-4437-8d61-61db75955e93",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "09a58089-2037-41d8-af73-4cf8bf4cc81b",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2320),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2370),
                            DrinkId = "8c5c8eed-1bd7-405c-aef1-8c5d39a47875",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "5dec5678-05f7-4816-a5f4-3c4fd9eff435",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2440),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2480),
                            DrinkId = "8c5c8eed-1bd7-405c-aef1-8c5d39a47875",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "f565daf3-2a22-449b-b326-8d2aa0c7a446",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2550),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2600),
                            DrinkId = "74da8fd9-4935-40e4-9d5c-1b6e45f91763",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "84976bd5-ad89-4603-aa19-3193a9d98b08",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2680),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2830),
                            DrinkId = "74da8fd9-4935-40e4-9d5c-1b6e45f91763",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "847eb71a-83c4-476d-b9e4-432ffbd92cdd",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2920),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(2970),
                            DrinkId = "606a7ee8-bd65-44c4-b25e-c1959cf1e364",
                            IngredientId = "81b3074b-4958-4fbe-a298-38674a1118c9",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "af272a17-1527-4b19-9ce5-85b4e37f1038",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(3040),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(3090),
                            DrinkId = "606a7ee8-bd65-44c4-b25e-c1959cf1e364",
                            IngredientId = "5f208d31-0879-41d5-a2ef-b8a3e29b515d",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "237ee8c6-0fcd-4b61-a9c6-76540482ac37",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Local).AddTicks(3400),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(3380),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "071a8b6e-ddf9-4c42-9ade-93296902a5e3"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "61494a64-a8de-4208-8de1-a9c4416fda42",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(3520),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 87, DateTimeKind.Unspecified).AddTicks(3580),
                            DrinkId = "d4fa0a6b-85cf-4c75-9441-2c4a18ea90b8",
                            OrderId = "237ee8c6-0fcd-4b61-a9c6-76540482ac37",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "30b3df68-dc5c-47fa-b75a-9cb92f722896",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(2970),
                            DateModified = new DateTime(2024, 5, 25, 22, 2, 6, 86, DateTimeKind.Unspecified).AddTicks(3100),
                            IsApproved = true,
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "071a8b6e-ddf9-4c42-9ade-93296902a5e3",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "c0599d33-8dda-4444-8d60-446cef15f0bb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "071a8b6e-ddf9-4c42-9ade-93296902a5e3",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "071a8b6e-ddf9-4c42-9ade-93296902a5e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0ec9a0b-b9eb-4b07-800c-1dde192a1a72",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnps4pNQVvtP0l3680nNfb7jC+C5L4JaODCHLudfGlokvuqLmpqm8LN1QtrGJaj5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "615e9278-0316-4cac-953c-f8b5df103eb5",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
