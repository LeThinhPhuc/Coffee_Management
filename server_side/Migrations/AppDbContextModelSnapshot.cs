// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "91175f63-fba5-4dfb-8a1b-c1cf8e998497",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1639),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1633),
                            DrinkTypeId = "9de738ce-e713-4d7f-88a5-20413edb0031",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "e953f68d-260b-4d17-a20a-99433cfd09e5",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1648),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1644),
                            DrinkTypeId = "9de738ce-e713-4d7f-88a5-20413edb0031",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "cd270217-2581-4a36-8d32-758d93fecb8d",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1657),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1653),
                            DrinkTypeId = "5ff31551-27d5-4427-9b19-f5f4e5e7cd16",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "f4ca04da-cc5f-4273-a3ab-658f6f5c15fd",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1670),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1666),
                            DrinkTypeId = "5ff31551-27d5-4427-9b19-f5f4e5e7cd16",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "723b63e7-a54e-4d2a-a745-fbadb2f3ee20",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1678),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1675),
                            DrinkTypeId = "40ba98c6-5709-401b-8516-479d6770b50e",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "d6d7ded9-ab0f-4f13-b8a6-68d9eb21fe76",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1687),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1684),
                            DrinkTypeId = "40ba98c6-5709-401b-8516-479d6770b50e",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "7a283038-c765-4466-9bd6-abf09e98ca2a",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1697),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1693),
                            DrinkTypeId = "b8654d09-decf-488d-8905-b370ab19645c",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "f5cad867-a483-435e-87cb-4438ea5ee11e",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1709),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1706),
                            DrinkTypeId = "b8654d09-decf-488d-8905-b370ab19645c",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "9de738ce-e713-4d7f-88a5-20413edb0031",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1523),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1519),
                            Name = "Coffee",
                            ShopId = "4c22c10a-9561-4449-a0e5-e3c9ac6197f4"
                        },
                        new
                        {
                            Id = "5ff31551-27d5-4427-9b19-f5f4e5e7cd16",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1534),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1531),
                            Name = "Tea",
                            ShopId = "4c22c10a-9561-4449-a0e5-e3c9ac6197f4"
                        },
                        new
                        {
                            Id = "40ba98c6-5709-401b-8516-479d6770b50e",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1543),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1540),
                            Name = "Smoothie",
                            ShopId = "4c22c10a-9561-4449-a0e5-e3c9ac6197f4"
                        },
                        new
                        {
                            Id = "b8654d09-decf-488d-8905-b370ab19645c",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1606),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1601),
                            Name = "Juice",
                            ShopId = "4c22c10a-9561-4449-a0e5-e3c9ac6197f4"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1744),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1746),
                            ExpiryDate = new DateTime(2024, 6, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1747),
                            Image = "",
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1757),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1759),
                            ExpiryDate = new DateTime(2024, 7, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(1760),
                            Image = "",
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "6ad71501-c34b-49ef-88ff-5be139c3af60",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1787),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1790),
                            DrinkId = "91175f63-fba5-4dfb-8a1b-c1cf8e998497",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "a5bf043a-2877-488e-954f-df2376dae50d",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1800),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1802),
                            DrinkId = "91175f63-fba5-4dfb-8a1b-c1cf8e998497",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "28d951ba-a537-482f-a2fc-23b0b3678db5",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1809),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1811),
                            DrinkId = "e953f68d-260b-4d17-a20a-99433cfd09e5",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "efde9a9e-f3f2-48ea-bd90-0f780cf6e4b6",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1818),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1820),
                            DrinkId = "e953f68d-260b-4d17-a20a-99433cfd09e5",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "1f5f38d8-1680-4332-bf78-883e3b426ab5",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1828),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1830),
                            DrinkId = "cd270217-2581-4a36-8d32-758d93fecb8d",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "c0685c05-7a37-4420-b411-21b556214b74",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1872),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1875),
                            DrinkId = "cd270217-2581-4a36-8d32-758d93fecb8d",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "a97ca28e-e799-42c0-8cd7-946899953ec3",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1882),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1884),
                            DrinkId = "f4ca04da-cc5f-4273-a3ab-658f6f5c15fd",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "527cabc2-e55c-4ec1-acf2-f548c62683eb",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1891),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1893),
                            DrinkId = "f4ca04da-cc5f-4273-a3ab-658f6f5c15fd",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "803bd7f5-82fc-4326-9023-f10746669b16",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1900),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1901),
                            DrinkId = "723b63e7-a54e-4d2a-a745-fbadb2f3ee20",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "67bd08de-fb17-4c3b-98a9-256338a6730e",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1911),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1913),
                            DrinkId = "723b63e7-a54e-4d2a-a745-fbadb2f3ee20",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "7b863f04-8d43-41fa-9798-b39e6edeeb29",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1919),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1921),
                            DrinkId = "d6d7ded9-ab0f-4f13-b8a6-68d9eb21fe76",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "35b45f79-1f35-455d-93a8-8b15519358f6",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1928),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1930),
                            DrinkId = "d6d7ded9-ab0f-4f13-b8a6-68d9eb21fe76",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "f3cf9313-5c4c-4de8-9d22-f748dfb86a94",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1936),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1938),
                            DrinkId = "7a283038-c765-4466-9bd6-abf09e98ca2a",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "ba76c90f-b984-4c19-aa0f-27bbe5be58b8",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1947),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1949),
                            DrinkId = "7a283038-c765-4466-9bd6-abf09e98ca2a",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "e687c65f-5d51-4020-ba91-eeedc9b433f1",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1956),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1958),
                            DrinkId = "f5cad867-a483-435e-87cb-4438ea5ee11e",
                            IngredientId = "f47e0e15-06b4-4047-8f99-eb7c0b111d7b",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "39417d80-5ff0-4410-b9d5-385a645441a8",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1965),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1967),
                            DrinkId = "f5cad867-a483-435e-87cb-4438ea5ee11e",
                            IngredientId = "1db1b124-0267-45cf-a78e-b36b09d64a83",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "63f58b54-5732-4227-aca4-55b280d4c387",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Local).AddTicks(2020),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(2013),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "2984a77e-6407-4001-ae09-3e3dab5688c1"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "8dcaa3f9-a45f-49f9-a518-8fb5e7bbbfae",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(2046),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(2048),
                            DrinkId = "91175f63-fba5-4dfb-8a1b-c1cf8e998497",
                            OrderId = "63f58b54-5732-4227-aca4-55b280d4c387",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "4c22c10a-9561-4449-a0e5-e3c9ac6197f4",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1482),
                            DateModified = new DateTime(2024, 5, 21, 14, 17, 0, 770, DateTimeKind.Unspecified).AddTicks(1502),
                            IsApproved = true,
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "2984a77e-6407-4001-ae09-3e3dab5688c1",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "6365a643-25dd-4a4c-ad1e-452f3d832eb8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2984a77e-6407-4001-ae09-3e3dab5688c1",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "2984a77e-6407-4001-ae09-3e3dab5688c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "640600af-1a2e-4ecb-bac6-1b18deddb99e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXG5ih5CNy9slIj1aEuYn4+mxC6VqqBuI0LmSqxfoOfns4ergXY0eMyxsskTGQenw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a55d7bb5-d3c2-4ab3-9df3-3acff0add478",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
