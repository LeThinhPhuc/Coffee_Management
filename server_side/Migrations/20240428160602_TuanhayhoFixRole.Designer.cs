// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240428160602_TuanhayhoFixRole")]
    partial class TuanhayhoFixRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "fd068936-4f57-43a2-a012-42d580fd9fbf",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5120),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5100),
                            DrinkTypeId = "2a14dae5-beb6-4dbb-a2ff-6153d00c1dbe",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "908d84ef-bec5-487b-804d-f19609bf3a2f",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5190),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5180),
                            DrinkTypeId = "2a14dae5-beb6-4dbb-a2ff-6153d00c1dbe",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "1de30657-b449-4692-84e1-98db384d0a85",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5320),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5310),
                            DrinkTypeId = "e8e184b6-2bec-4403-af60-2765f1232147",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "2136ad35-e89f-46f7-ab1f-dbedb7e50753",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5380),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5370),
                            DrinkTypeId = "e8e184b6-2bec-4403-af60-2765f1232147",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "a111e3b6-53ef-451a-943d-cf1174359aa0",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5440),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5430),
                            DrinkTypeId = "62849ab7-3235-4ffa-a925-e604c059e268",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "ab26a783-deb7-4f60-a62c-aa11d5988b65",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5510),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5500),
                            DrinkTypeId = "62849ab7-3235-4ffa-a925-e604c059e268",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "201321c2-97e4-4bde-8d6f-1d100758976c",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5570),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5560),
                            DrinkTypeId = "0d47c0fd-780a-48aa-99f2-2353d581de16",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "249c15b0-74f7-4f61-abe0-cf74cc1fb489",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5630),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5620),
                            DrinkTypeId = "0d47c0fd-780a-48aa-99f2-2353d581de16",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "2a14dae5-beb6-4dbb-a2ff-6153d00c1dbe",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(4820),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(4800),
                            Name = "Coffee",
                            ShopId = "5e8bfdd2-bd5d-4cec-9054-931f7715302d"
                        },
                        new
                        {
                            Id = "e8e184b6-2bec-4403-af60-2765f1232147",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(4880),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(4870),
                            Name = "Tea",
                            ShopId = "5e8bfdd2-bd5d-4cec-9054-931f7715302d"
                        },
                        new
                        {
                            Id = "62849ab7-3235-4ffa-a925-e604c059e268",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(4950),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(4940),
                            Name = "Smoothie",
                            ShopId = "5e8bfdd2-bd5d-4cec-9054-931f7715302d"
                        },
                        new
                        {
                            Id = "0d47c0fd-780a-48aa-99f2-2353d581de16",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5010),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5000),
                            Name = "Juice",
                            ShopId = "5e8bfdd2-bd5d-4cec-9054-931f7715302d"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5800),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5820),
                            ExpiryDate = new DateTime(2024, 5, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5830),
                            Image = "",
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5870),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5890),
                            ExpiryDate = new DateTime(2024, 6, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(5900),
                            Image = "",
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "6b0b4cff-908b-4972-a7c1-d33c22865fe8",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5970),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(5990),
                            DrinkId = "fd068936-4f57-43a2-a012-42d580fd9fbf",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "54a8a601-7f14-4951-94c4-b33a3c7a1e97",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6030),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6060),
                            DrinkId = "fd068936-4f57-43a2-a012-42d580fd9fbf",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "ac867217-2cd1-4342-83f1-ec971b246b2c",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6090),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6120),
                            DrinkId = "908d84ef-bec5-487b-804d-f19609bf3a2f",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "00a971f0-c192-40d7-a58b-684e318cf963",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6150),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6230),
                            DrinkId = "908d84ef-bec5-487b-804d-f19609bf3a2f",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "388ae7ce-05b1-4b82-879e-fcab2b0201a0",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6270),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6300),
                            DrinkId = "1de30657-b449-4692-84e1-98db384d0a85",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "d25b3e11-85cf-4979-932b-7590d2b2ee7f",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6340),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6360),
                            DrinkId = "1de30657-b449-4692-84e1-98db384d0a85",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "102c408f-22c6-43cc-b7ca-e0f6d096fa16",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6400),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6420),
                            DrinkId = "2136ad35-e89f-46f7-ab1f-dbedb7e50753",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "3ffbf627-1750-4f9a-a46e-cfcb9e3c9544",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6460),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6490),
                            DrinkId = "2136ad35-e89f-46f7-ab1f-dbedb7e50753",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "c29497c3-acbb-419c-ad99-48abadac8998",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6530),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6550),
                            DrinkId = "a111e3b6-53ef-451a-943d-cf1174359aa0",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "de503d88-a0b9-4af2-bdc0-57dcbbfe8b74",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6590),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6670),
                            DrinkId = "a111e3b6-53ef-451a-943d-cf1174359aa0",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "835eb2ef-d73b-49bf-be3d-af9ddd25817c",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6710),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6740),
                            DrinkId = "ab26a783-deb7-4f60-a62c-aa11d5988b65",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "570319a9-46b8-4f04-9dba-8a0c20ae0aac",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6770),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6800),
                            DrinkId = "ab26a783-deb7-4f60-a62c-aa11d5988b65",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "315a527e-7b81-42aa-a42a-d76edb1aff3a",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6830),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6860),
                            DrinkId = "201321c2-97e4-4bde-8d6f-1d100758976c",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "d3875873-d7bd-4958-8261-3553b0274622",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6890),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6920),
                            DrinkId = "201321c2-97e4-4bde-8d6f-1d100758976c",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        },
                        new
                        {
                            Id = "e6355527-0e74-424b-a892-f56c10bcb191",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6950),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(6980),
                            DrinkId = "249c15b0-74f7-4f61-abe0-cf74cc1fb489",
                            IngredientId = "55cafebe-f085-4b1a-ab9b-c6f128878995",
                            Quantity = 10
                        },
                        new
                        {
                            Id = "69bb416b-e0af-4847-90ae-e63ee3fe9012",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(8830),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(9060),
                            DrinkId = "249c15b0-74f7-4f61-abe0-cf74cc1fb489",
                            IngredientId = "1f70f06b-4d7e-49c3-89c5-6bb8c6bd4d5d",
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "39d93e5f-1227-454b-8153-22b412232f95",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Local).AddTicks(9460),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(9450),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "f2aff88c-1d4a-430b-bdc5-cb6358616a4e"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "c130bb72-0884-4ddd-ab1c-3e0f8a500bab",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(9530),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(9570),
                            DrinkId = "fd068936-4f57-43a2-a012-42d580fd9fbf",
                            OrderId = "39d93e5f-1227-454b-8153-22b412232f95",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "5e8bfdd2-bd5d-4cec-9054-931f7715302d",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(4430),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(4490),
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "f2aff88c-1d4a-430b-bdc5-cb6358616a4e",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "5563d293-21c4-4118-925c-346da5f58e7c",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(4530),
                            DateModified = new DateTime(2024, 4, 28, 23, 6, 1, 396, DateTimeKind.Unspecified).AddTicks(4560),
                            IsSuspended = false,
                            Name = "Tea Shop",
                            OwnerId = "f2aff88c-1d4a-430b-bdc5-cb6358616a4e",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "9597e3c2-469c-4ccc-8e0f-28e34a4a65c6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f2aff88c-1d4a-430b-bdc5-cb6358616a4e",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "f2aff88c-1d4a-430b-bdc5-cb6358616a4e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "499443ad-dee7-44ce-9fdf-1df83585376a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFnNv4aZ6tUmyKW6pR1ophkULzlo3b79QE+v2cm+m8thxyZ7IuOKhPfKlqPWCwdyeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "852e101c-1547-478f-95b5-675f9c993482",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
