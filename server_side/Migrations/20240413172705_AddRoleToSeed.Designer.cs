// <auto-generated />
using System;
using CoffeeShopApi.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240413172705_AddRoleToSeed")]
    partial class AddRoleToSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrinkTypeId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = "f9655de8-f30c-4910-91ca-1e07c0070700",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9560),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9540),
                            DrinkTypeId = "82c34dab-70c0-46e4-a06d-4d3439cbb589",
                            Name = "Latte",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "148be6e8-72c1-43b6-99fc-d0ed91f75d80",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9620),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9610),
                            DrinkTypeId = "82c34dab-70c0-46e4-a06d-4d3439cbb589",
                            Name = "Cappuccino",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "f4b2244e-cebd-42b7-85c2-bd1539de485a",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9680),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9670),
                            DrinkTypeId = "dd91c711-8e1f-4d90-ace8-f696b95d1ed7",
                            Name = "Earl Grey",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = "2a32adc7-92d8-4e83-bdb0-0ff028de8e3d",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9750),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9740),
                            DrinkTypeId = "dd91c711-8e1f-4d90-ace8-f696b95d1ed7",
                            Name = "Green Tea",
                            Price = 22000.0
                        },
                        new
                        {
                            Id = "5868bc92-9f4e-47cc-8fdb-13e3d4a8a0fa",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9880),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9870),
                            DrinkTypeId = "c1aa00ce-7c64-4981-8dc2-f58f6fe0dd3e",
                            Name = "Strawberry Banana Smoothie",
                            Price = 28000.0
                        },
                        new
                        {
                            Id = "9bdebaef-4ed5-4bb2-8162-61e20d2bfb04",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9940),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9930),
                            DrinkTypeId = "c1aa00ce-7c64-4981-8dc2-f58f6fe0dd3e",
                            Name = "Mango Pineapple Smoothie",
                            Price = 23000.0
                        },
                        new
                        {
                            Id = "4f927e1f-8fb7-4a61-8c2d-9498227823a9",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Local),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9990),
                            DrinkTypeId = "60fc2806-2c83-41bc-8f92-809a3116ca33",
                            Name = "Orange Juice",
                            Price = 24000.0
                        },
                        new
                        {
                            Id = "d43534a6-ebdb-4a6d-8808-601075e9233e",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Local).AddTicks(70),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(60),
                            DrinkTypeId = "60fc2806-2c83-41bc-8f92-809a3116ca33",
                            Name = "Apple Juice",
                            Price = 24000.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("DrinkTypes");

                    b.HasData(
                        new
                        {
                            Id = "82c34dab-70c0-46e4-a06d-4d3439cbb589",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9170),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9160),
                            Name = "Coffee",
                            ShopId = "fd827bac-0bba-40df-adb9-a26f36c528e5"
                        },
                        new
                        {
                            Id = "dd91c711-8e1f-4d90-ace8-f696b95d1ed7",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9230),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9220),
                            Name = "Tea",
                            ShopId = "fd827bac-0bba-40df-adb9-a26f36c528e5"
                        },
                        new
                        {
                            Id = "c1aa00ce-7c64-4981-8dc2-f58f6fe0dd3e",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9370),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9360),
                            Name = "Smoothie",
                            ShopId = "fd827bac-0bba-40df-adb9-a26f36c528e5"
                        },
                        new
                        {
                            Id = "60fc2806-2c83-41bc-8f92-809a3116ca33",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Local).AddTicks(9440),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9430),
                            Name = "Juice",
                            ShopId = "fd827bac-0bba-40df-adb9-a26f36c528e5"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Amount = 5.0,
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(150),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(180),
                            ExpiryDate = new DateTime(2024, 5, 14, 0, 27, 3, 513, DateTimeKind.Local).AddTicks(190),
                            Name = "Milk"
                        },
                        new
                        {
                            Id = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Amount = 10.0,
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(220),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(240),
                            ExpiryDate = new DateTime(2024, 6, 14, 0, 27, 3, 513, DateTimeKind.Local).AddTicks(250),
                            Name = "Sugar"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IngredientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsInDrinks");

                    b.HasData(
                        new
                        {
                            Id = "c73894c5-3b0f-462b-a883-04e4b25969ed",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(390),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(420),
                            DrinkId = "f9655de8-f30c-4910-91ca-1e07c0070700",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "b3120ea5-af7c-457e-87e4-6ee839f89395",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(460),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(480),
                            DrinkId = "f9655de8-f30c-4910-91ca-1e07c0070700",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "f1ec82de-2f4b-4f87-97f0-f72e920732d4",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(520),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(550),
                            DrinkId = "148be6e8-72c1-43b6-99fc-d0ed91f75d80",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "d57e31a0-1dbe-428d-b0fa-4430f9b7bc20",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(580),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(610),
                            DrinkId = "148be6e8-72c1-43b6-99fc-d0ed91f75d80",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "d248c312-3738-4ea7-9769-feeef05998c3",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(640),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(670),
                            DrinkId = "f4b2244e-cebd-42b7-85c2-bd1539de485a",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "1f78dd55-f575-429f-883d-afdc27f28923",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(700),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1060),
                            DrinkId = "f4b2244e-cebd-42b7-85c2-bd1539de485a",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "2c0904e8-bf92-4448-a97b-78e2be53f32b",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1120),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1140),
                            DrinkId = "2a32adc7-92d8-4e83-bdb0-0ff028de8e3d",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "7e3aaefd-73c8-4efb-aa95-1d4bd99ccc00",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1180),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1210),
                            DrinkId = "2a32adc7-92d8-4e83-bdb0-0ff028de8e3d",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "d6ecb34a-c359-4c40-8fe8-8a73134e9ac7",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1240),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1260),
                            DrinkId = "5868bc92-9f4e-47cc-8fdb-13e3d4a8a0fa",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "213d09e4-717f-44c4-b591-4c1acafad5fa",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1300),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1320),
                            DrinkId = "5868bc92-9f4e-47cc-8fdb-13e3d4a8a0fa",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "a1175138-2364-4200-a012-cfaedaadb349",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1360),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1380),
                            DrinkId = "9bdebaef-4ed5-4bb2-8162-61e20d2bfb04",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "c96770b8-d221-4010-b738-179d5def3853",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1420),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1500),
                            DrinkId = "9bdebaef-4ed5-4bb2-8162-61e20d2bfb04",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "0cd843a3-b6c1-480a-969c-f82842f95a35",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1540),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1560),
                            DrinkId = "4f927e1f-8fb7-4a61-8c2d-9498227823a9",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "51e6b005-2f67-49dd-9952-e6e11b194e0b",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1600),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1620),
                            DrinkId = "4f927e1f-8fb7-4a61-8c2d-9498227823a9",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        },
                        new
                        {
                            Id = "88ed8e55-0787-4d2a-a9d7-4ed7e48ca276",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1660),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1690),
                            DrinkId = "d43534a6-ebdb-4a6d-8808-601075e9233e",
                            IngredientId = "690621f7-0f25-4a35-8bed-8c2a968f197a",
                            Quantity = 100
                        },
                        new
                        {
                            Id = "3b510b2b-e15e-4c93-95e7-70566140bdae",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1720),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1750),
                            DrinkId = "d43534a6-ebdb-4a6d-8808-601075e9233e",
                            IngredientId = "33cb620e-746c-4212-aff3-5448fc3d2b24",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "733a0e42-2cfa-4b68-b148-730a6a160b58",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Local).AddTicks(1900),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(1880),
                            OrderDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 28000.0,
                            UserId = "f4dfa19f-3243-48fd-b2cd-e187beefd672"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrinkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "4228af53-d20e-4745-9597-f39f1162fd90",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(2010),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 513, DateTimeKind.Unspecified).AddTicks(2040),
                            DrinkId = "f9655de8-f30c-4910-91ca-1e07c0070700",
                            OrderId = "733a0e42-2cfa-4b68-b148-730a6a160b58",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Revenue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = "fd827bac-0bba-40df-adb9-a26f36c528e5",
                            Address = "123 Main St",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(8960),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9020),
                            IsSuspended = false,
                            Name = "Coffee House",
                            OwnerId = "f4dfa19f-3243-48fd-b2cd-e187beefd672",
                            Revenue = 0.0
                        },
                        new
                        {
                            Id = "2c2a561e-a060-4475-81a3-7116d8180ebf",
                            Address = "456 Elm St",
                            DateCreated = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9060),
                            DateModified = new DateTime(2024, 4, 14, 0, 27, 3, 512, DateTimeKind.Unspecified).AddTicks(9080),
                            IsSuspended = false,
                            Name = "Tea Shop",
                            OwnerId = "f4dfa19f-3243-48fd-b2cd-e187beefd672",
                            Revenue = 0.0
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3ec70352-b83e-463f-890e-a2935450376e",
                            ConcurrencyStamp = "7e05ad81-9586-48de-a337-610fc25a5589",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f4dfa19f-3243-48fd-b2cd-e187beefd672",
                            RoleId = "3ec70352-b83e-463f-890e-a2935450376e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "f4dfa19f-3243-48fd-b2cd-e187beefd672",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cf83623-dd01-4dc8-a665-7d9108dfd3d7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEyso3P/S4/xM9dVs0jDq9aUkDPBXcki3++HJzpO9DkU6bYJc7dX6Jkb4E1ocN7QZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d366722b-7ada-4f04-bc06-9155d2f5955c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FullName = "Admin"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.DrinkType", "DrinkType")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkType");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("DrinkTypes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.IngredientInDrink", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Ingredient", "Ingredient")
                        .WithMany("IngredientInDrinks")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.OrderItem", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeShopApi.Models.DomainModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.ApplicationUser", "Owner")
                        .WithMany("Shops")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.VoucherCode", b =>
                {
                    b.HasOne("CoffeeShopApi.Models.DomainModels.Shop", "Shop")
                        .WithMany("VoucherCodes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Ingredient", b =>
                {
                    b.Navigation("IngredientInDrinks");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.Shop", b =>
                {
                    b.Navigation("DrinkTypes");

                    b.Navigation("VoucherCodes");
                });

            modelBuilder.Entity("CoffeeShopApi.Models.DomainModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
